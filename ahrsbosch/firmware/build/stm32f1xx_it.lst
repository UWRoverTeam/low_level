ARM GAS  /tmp/ccJqJJIt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	2
  20              		.global	NMI_Handler
  21              		.thumb
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB63:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
ARM GAS  /tmp/ccJqJJIt.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f1xx_it.c **** 
  40:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32f1xx_it.c **** 
  42:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32f1xx_it.c **** extern CAN_HandleTypeDef hcan1;
  44:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /******************************************************************************/
  47:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  48:Src/stm32f1xx_it.c **** /******************************************************************************/
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** /**
  51:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  52:Src/stm32f1xx_it.c **** */
  53:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  54:Src/stm32f1xx_it.c **** {
  27              		.loc 1 54 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE63:
  36 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	2
  38              		.global	HardFault_Handler
  39              		.thumb
  40              		.thumb_func
  42              	HardFault_Handler:
  43              	.LFB64:
  55:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  58:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  59:Src/stm32f1xx_it.c **** 
  60:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  61:Src/stm32f1xx_it.c **** }
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /**
  64:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  65:Src/stm32f1xx_it.c **** */
  66:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  67:Src/stm32f1xx_it.c **** {
  44              		.loc 1 67 0
  45              		.cfi_startproc
  46              		@ Volatile: function does not return.
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.L3:
ARM GAS  /tmp/ccJqJJIt.s 			page 3


  68:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  69:Src/stm32f1xx_it.c **** 
  70:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  71:Src/stm32f1xx_it.c ****   while (1)
  72:Src/stm32f1xx_it.c ****   {
  73:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  74:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  75:Src/stm32f1xx_it.c ****   }
  51              		.loc 1 75 0 discriminator 1
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE64:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB65:
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  79:Src/stm32f1xx_it.c **** }
  80:Src/stm32f1xx_it.c **** 
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  83:Src/stm32f1xx_it.c **** */
  84:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  64              		.loc 1 85 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   while (1)
  90:Src/stm32f1xx_it.c ****   {
  91:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  92:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  93:Src/stm32f1xx_it.c ****   }
  71              		.loc 1 93 0 discriminator 1
  72 0000 FEE7     		b	.L5
  73              		.cfi_endproc
  74              	.LFE65:
  76 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  77              		.align	2
  78              		.global	BusFault_Handler
  79              		.thumb
  80              		.thumb_func
  82              	BusFault_Handler:
  83              	.LFB66:
  94:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  95:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccJqJJIt.s 			page 4


  96:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  97:Src/stm32f1xx_it.c **** }
  98:Src/stm32f1xx_it.c **** 
  99:Src/stm32f1xx_it.c **** /**
 100:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 101:Src/stm32f1xx_it.c **** */
 102:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 103:Src/stm32f1xx_it.c **** {
  84              		.loc 1 103 0
  85              		.cfi_startproc
  86              		@ Volatile: function does not return.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.L7:
 104:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 105:Src/stm32f1xx_it.c **** 
 106:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 107:Src/stm32f1xx_it.c ****   while (1)
 108:Src/stm32f1xx_it.c ****   {
 109:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 110:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 111:Src/stm32f1xx_it.c ****   }
  91              		.loc 1 111 0 discriminator 1
  92 0000 FEE7     		b	.L7
  93              		.cfi_endproc
  94              	.LFE66:
  96 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  97              		.align	2
  98              		.global	UsageFault_Handler
  99              		.thumb
 100              		.thumb_func
 102              	UsageFault_Handler:
 103              	.LFB67:
 112:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 113:Src/stm32f1xx_it.c **** 
 114:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 115:Src/stm32f1xx_it.c **** }
 116:Src/stm32f1xx_it.c **** 
 117:Src/stm32f1xx_it.c **** /**
 118:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 119:Src/stm32f1xx_it.c **** */
 120:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 121:Src/stm32f1xx_it.c **** {
 104              		.loc 1 121 0
 105              		.cfi_startproc
 106              		@ Volatile: function does not return.
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.L9:
 122:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 123:Src/stm32f1xx_it.c **** 
 124:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 125:Src/stm32f1xx_it.c ****   while (1)
 126:Src/stm32f1xx_it.c ****   {
 127:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
ARM GAS  /tmp/ccJqJJIt.s 			page 5


 128:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 129:Src/stm32f1xx_it.c ****   }
 111              		.loc 1 129 0 discriminator 1
 112 0000 FEE7     		b	.L9
 113              		.cfi_endproc
 114              	.LFE67:
 116 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 117              		.align	2
 118              		.global	SVC_Handler
 119              		.thumb
 120              		.thumb_func
 122              	SVC_Handler:
 123              	.LFB68:
 130:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 133:Src/stm32f1xx_it.c **** }
 134:Src/stm32f1xx_it.c **** 
 135:Src/stm32f1xx_it.c **** /**
 136:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 137:Src/stm32f1xx_it.c **** */
 138:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 139:Src/stm32f1xx_it.c **** {
 124              		.loc 1 139 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129 0000 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE68:
 133 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 134              		.align	2
 135              		.global	DebugMon_Handler
 136              		.thumb
 137              		.thumb_func
 139              	DebugMon_Handler:
 140              	.LFB69:
 140:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 143:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 144:Src/stm32f1xx_it.c **** 
 145:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 146:Src/stm32f1xx_it.c **** }
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c **** /**
 149:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 150:Src/stm32f1xx_it.c **** */
 151:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 152:Src/stm32f1xx_it.c **** {
 141              		.loc 1 152 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 7047     		bx	lr
ARM GAS  /tmp/ccJqJJIt.s 			page 6


 147              		.cfi_endproc
 148              	.LFE69:
 150 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 151              		.align	2
 152              		.global	PendSV_Handler
 153              		.thumb
 154              		.thumb_func
 156              	PendSV_Handler:
 157              	.LFB70:
 153:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 154:Src/stm32f1xx_it.c **** 
 155:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 156:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 157:Src/stm32f1xx_it.c **** 
 158:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 159:Src/stm32f1xx_it.c **** }
 160:Src/stm32f1xx_it.c **** 
 161:Src/stm32f1xx_it.c **** /**
 162:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 163:Src/stm32f1xx_it.c **** */
 164:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 165:Src/stm32f1xx_it.c **** {
 158              		.loc 1 165 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0000 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE70:
 167 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 168              		.align	2
 169              		.global	SysTick_Handler
 170              		.thumb
 171              		.thumb_func
 173              	SysTick_Handler:
 174              	.LFB71:
 166:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 167:Src/stm32f1xx_it.c **** 
 168:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 169:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 170:Src/stm32f1xx_it.c **** 
 171:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 172:Src/stm32f1xx_it.c **** }
 173:Src/stm32f1xx_it.c **** 
 174:Src/stm32f1xx_it.c **** /**
 175:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 176:Src/stm32f1xx_it.c **** */
 177:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 178:Src/stm32f1xx_it.c **** {
 175              		.loc 1 178 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		.loc 1 178 0
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI0:
ARM GAS  /tmp/ccJqJJIt.s 			page 7


 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
 184              		.cfi_offset 14, -4
 179:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 180:Src/stm32f1xx_it.c **** 
 181:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 182:Src/stm32f1xx_it.c ****   HAL_IncTick();
 185              		.loc 1 182 0
 186 0002 FFF7FEFF 		bl	HAL_IncTick
 187              	.LVL0:
 183:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 184:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 185:Src/stm32f1xx_it.c **** 
 186:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 187:Src/stm32f1xx_it.c **** }
 188              		.loc 1 187 0
 189 0006 BDE80840 		pop	{r3, lr}
 190              	.LCFI1:
 191              		.cfi_restore 14
 192              		.cfi_restore 3
 193              		.cfi_def_cfa_offset 0
 183:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 194              		.loc 1 183 0
 195 000a FFF7FEBF 		b	HAL_SYSTICK_IRQHandler
 196              	.LVL1:
 197              		.cfi_endproc
 198              	.LFE71:
 200 000e 00BF     		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 201              		.align	2
 202              		.global	CAN1_TX_IRQHandler
 203              		.thumb
 204              		.thumb_func
 206              	CAN1_TX_IRQHandler:
 207              	.LFB72:
 188:Src/stm32f1xx_it.c **** 
 189:Src/stm32f1xx_it.c **** /******************************************************************************/
 190:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 191:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 192:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 193:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 194:Src/stm32f1xx_it.c **** /******************************************************************************/
 195:Src/stm32f1xx_it.c **** 
 196:Src/stm32f1xx_it.c **** /**
 197:Src/stm32f1xx_it.c **** * @brief This function handles CAN1 TX interrupt.
 198:Src/stm32f1xx_it.c **** */
 199:Src/stm32f1xx_it.c **** void CAN1_TX_IRQHandler(void)
 200:Src/stm32f1xx_it.c **** {
 208              		.loc 1 200 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 201:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 202:Src/stm32f1xx_it.c **** 
 203:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 204:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 213              		.loc 1 204 0
ARM GAS  /tmp/ccJqJJIt.s 			page 8


 214 0000 0148     		ldr	r0, .L16
 215 0002 FFF7FEBF 		b	HAL_CAN_IRQHandler
 216              	.LVL2:
 217              	.L17:
 218 0006 00BF     		.align	2
 219              	.L16:
 220 0008 00000000 		.word	hcan1
 221              		.cfi_endproc
 222              	.LFE72:
 224              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 225              		.align	2
 226              		.global	CAN1_RX0_IRQHandler
 227              		.thumb
 228              		.thumb_func
 230              	CAN1_RX0_IRQHandler:
 231              	.LFB73:
 205:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 206:Src/stm32f1xx_it.c **** 
 207:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 208:Src/stm32f1xx_it.c **** }
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c **** /**
 211:Src/stm32f1xx_it.c **** * @brief This function handles CAN1 RX0 interrupt.
 212:Src/stm32f1xx_it.c **** */
 213:Src/stm32f1xx_it.c **** void CAN1_RX0_IRQHandler(void)
 214:Src/stm32f1xx_it.c **** {
 232              		.loc 1 214 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 215:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 218:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 237              		.loc 1 218 0
 238 0000 0148     		ldr	r0, .L19
 239 0002 FFF7FEBF 		b	HAL_CAN_IRQHandler
 240              	.LVL3:
 241              	.L20:
 242 0006 00BF     		.align	2
 243              	.L19:
 244 0008 00000000 		.word	hcan1
 245              		.cfi_endproc
 246              	.LFE73:
 248              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 249              		.align	2
 250              		.global	CAN1_RX1_IRQHandler
 251              		.thumb
 252              		.thumb_func
 254              	CAN1_RX1_IRQHandler:
 255              	.LFB74:
 219:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 220:Src/stm32f1xx_it.c **** 
 221:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 222:Src/stm32f1xx_it.c **** }
 223:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccJqJJIt.s 			page 9


 224:Src/stm32f1xx_it.c **** /**
 225:Src/stm32f1xx_it.c **** * @brief This function handles CAN1 RX1 interrupt.
 226:Src/stm32f1xx_it.c **** */
 227:Src/stm32f1xx_it.c **** void CAN1_RX1_IRQHandler(void)
 228:Src/stm32f1xx_it.c **** {
 256              		.loc 1 228 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 229:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 232:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 261              		.loc 1 232 0
 262 0000 0148     		ldr	r0, .L22
 263 0002 FFF7FEBF 		b	HAL_CAN_IRQHandler
 264              	.LVL4:
 265              	.L23:
 266 0006 00BF     		.align	2
 267              	.L22:
 268 0008 00000000 		.word	hcan1
 269              		.cfi_endproc
 270              	.LFE74:
 272              		.section	.text.CAN1_SCE_IRQHandler,"ax",%progbits
 273              		.align	2
 274              		.global	CAN1_SCE_IRQHandler
 275              		.thumb
 276              		.thumb_func
 278              	CAN1_SCE_IRQHandler:
 279              	.LFB75:
 233:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 236:Src/stm32f1xx_it.c **** }
 237:Src/stm32f1xx_it.c **** 
 238:Src/stm32f1xx_it.c **** /**
 239:Src/stm32f1xx_it.c **** * @brief This function handles CAN1 SCE interrupt.
 240:Src/stm32f1xx_it.c **** */
 241:Src/stm32f1xx_it.c **** void CAN1_SCE_IRQHandler(void)
 242:Src/stm32f1xx_it.c **** {
 280              		.loc 1 242 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 243:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
 244:Src/stm32f1xx_it.c **** 
 245:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 0 */
 246:Src/stm32f1xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 285              		.loc 1 246 0
 286 0000 0148     		ldr	r0, .L25
 287 0002 FFF7FEBF 		b	HAL_CAN_IRQHandler
 288              	.LVL5:
 289              	.L26:
 290 0006 00BF     		.align	2
 291              	.L25:
ARM GAS  /tmp/ccJqJJIt.s 			page 10


 292 0008 00000000 		.word	hcan1
 293              		.cfi_endproc
 294              	.LFE75:
 296              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 297              		.align	2
 298              		.global	I2C1_EV_IRQHandler
 299              		.thumb
 300              		.thumb_func
 302              	I2C1_EV_IRQHandler:
 303              	.LFB76:
 247:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
 248:Src/stm32f1xx_it.c **** 
 249:Src/stm32f1xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 1 */
 250:Src/stm32f1xx_it.c **** }
 251:Src/stm32f1xx_it.c **** 
 252:Src/stm32f1xx_it.c **** /**
 253:Src/stm32f1xx_it.c **** * @brief This function handles I2C1 event interrupt.
 254:Src/stm32f1xx_it.c **** */
 255:Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 256:Src/stm32f1xx_it.c **** {
 304              		.loc 1 256 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 257:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 0 */
 258:Src/stm32f1xx_it.c **** 
 259:Src/stm32f1xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 0 */
 260:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c1);
 309              		.loc 1 260 0
 310 0000 0148     		ldr	r0, .L28
 311 0002 FFF7FEBF 		b	HAL_I2C_EV_IRQHandler
 312              	.LVL6:
 313              	.L29:
 314 0006 00BF     		.align	2
 315              	.L28:
 316 0008 00000000 		.word	hi2c1
 317              		.cfi_endproc
 318              	.LFE76:
 320              		.text
 321              	.Letext0:
 322              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 323              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 324              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 325              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 326              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 327              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 328              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 329              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 330              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 331              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccJqJJIt.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccJqJJIt.s:19     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccJqJJIt.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:42     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccJqJJIt.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:62     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccJqJJIt.s:77     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:82     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccJqJJIt.s:97     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:102    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccJqJJIt.s:117    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:122    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccJqJJIt.s:134    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:139    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccJqJJIt.s:151    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:156    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccJqJJIt.s:168    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccJqJJIt.s:173    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccJqJJIt.s:201    .text.CAN1_TX_IRQHandler:0000000000000000 $t
     /tmp/ccJqJJIt.s:206    .text.CAN1_TX_IRQHandler:0000000000000000 CAN1_TX_IRQHandler
     /tmp/ccJqJJIt.s:220    .text.CAN1_TX_IRQHandler:0000000000000008 $d
     /tmp/ccJqJJIt.s:225    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccJqJJIt.s:230    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccJqJJIt.s:244    .text.CAN1_RX0_IRQHandler:0000000000000008 $d
     /tmp/ccJqJJIt.s:249    .text.CAN1_RX1_IRQHandler:0000000000000000 $t
     /tmp/ccJqJJIt.s:254    .text.CAN1_RX1_IRQHandler:0000000000000000 CAN1_RX1_IRQHandler
     /tmp/ccJqJJIt.s:268    .text.CAN1_RX1_IRQHandler:0000000000000008 $d
     /tmp/ccJqJJIt.s:273    .text.CAN1_SCE_IRQHandler:0000000000000000 $t
     /tmp/ccJqJJIt.s:278    .text.CAN1_SCE_IRQHandler:0000000000000000 CAN1_SCE_IRQHandler
     /tmp/ccJqJJIt.s:292    .text.CAN1_SCE_IRQHandler:0000000000000008 $d
     /tmp/ccJqJJIt.s:297    .text.I2C1_EV_IRQHandler:0000000000000000 $t
     /tmp/ccJqJJIt.s:302    .text.I2C1_EV_IRQHandler:0000000000000000 I2C1_EV_IRQHandler
     /tmp/ccJqJJIt.s:316    .text.I2C1_EV_IRQHandler:0000000000000008 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_CAN_IRQHandler
hcan1
HAL_I2C_EV_IRQHandler
hi2c1

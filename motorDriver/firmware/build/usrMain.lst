ARM GAS  /tmp/ccoEKpII.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usrMain.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	__aeabi_i2f
  19              		.global	__aeabi_ui2f
  20              		.global	__aeabi_f2iz
  21              		.section	.text.usrMain,"ax",%progbits
  22              		.align	2
  23              		.global	usrMain
  24              		.thumb
  25              		.thumb_func
  27              	usrMain:
  28              	.LFB64:
  29              		.file 1 "Src/usrMain.c"
   1:Src/usrMain.c **** #include "usrMain.h"
   2:Src/usrMain.c **** 
   3:Src/usrMain.c **** #include "adc.h"
   4:Src/usrMain.c **** #include "can.h"
   5:Src/usrMain.c **** #include "canteros.h"
   6:Src/usrMain.c **** #include "globals.h"
   7:Src/usrMain.c **** #include "motor.h"
   8:Src/usrMain.c **** #include "pid.h"
   9:Src/usrMain.c **** 
  10:Src/usrMain.c **** #define PRIMARY_ADDRESS 196
  11:Src/usrMain.c **** #define ADDRESSES_SIZE 2
  12:Src/usrMain.c **** static const uint16_t myAddresses[ADDRESSES_SIZE] = {
  13:Src/usrMain.c **** 	180, //all arm actuators
  14:Src/usrMain.c **** 	PRIMARY_ADDRESS
  15:Src/usrMain.c **** };
  16:Src/usrMain.c **** #define HEADERS_SIZE 8
  17:Src/usrMain.c **** static const uint8_t handledHeaders[HEADERS_SIZE] = {
  18:Src/usrMain.c **** 	7, 17, 8, 18, 38, 9, 19, //power, position, speed
  19:Src/usrMain.c **** 	20 //request current
  20:Src/usrMain.c **** };
  21:Src/usrMain.c **** 
  22:Src/usrMain.c **** typedef enum {
  23:Src/usrMain.c **** 	OFF, POWER, POSITION
  24:Src/usrMain.c **** } Mode;
  25:Src/usrMain.c **** 
  26:Src/usrMain.c **** #define ENC_CNT_SCALE 39999
  27:Src/usrMain.c **** static uint16_t ENC_CNT;
  28:Src/usrMain.c **** volatile static uint16_t indexPulsePosition = 0xffff;
  29:Src/usrMain.c **** static Mode modeNow = OFF;
ARM GAS  /tmp/ccoEKpII.s 			page 2


  30:Src/usrMain.c **** 
  31:Src/usrMain.c **** #define POSITION_KP 5.0f
  32:Src/usrMain.c **** #define POSITION_KI 0.0f
  33:Src/usrMain.c **** #define POSITION_KD 0.005f
  34:Src/usrMain.c **** static PidData positionPid;
  35:Src/usrMain.c **** #if PRIMARY_ADDRESS == 191
  36:Src/usrMain.c ****  #define PID_REVERSED true
  37:Src/usrMain.c **** #else
  38:Src/usrMain.c ****  #define PID_REVERSED false
  39:Src/usrMain.c **** #endif
  40:Src/usrMain.c **** 
  41:Src/usrMain.c **** static uint16_t positionInfoPeriodMs = 0;
  42:Src/usrMain.c **** 
  43:Src/usrMain.c **** static inline void handleMessage(const CanterosMessage* m)
  44:Src/usrMain.c **** {
  45:Src/usrMain.c **** 	//-----Power-----//
  46:Src/usrMain.c **** 	if (m->header == 7) { //set power
  47:Src/usrMain.c **** 		modeNow = POWER;
  48:Src/usrMain.c **** 		pidStop(&positionPid);
  49:Src/usrMain.c **** 		int16_t power = ((int16_t)m->payload[0] << 8) | m->payload[1];
  50:Src/usrMain.c **** #if PRIMARY_ADDRESS == 192 || PRIMARY_ADDRESS == 193
  51:Src/usrMain.c **** 		power /= 2;
  52:Src/usrMain.c **** #endif
  53:Src/usrMain.c **** 		motorSetPower((int32_t)power * 1000 / -INT16_MIN);
  54:Src/usrMain.c **** 		led(1, power == 0 ? 0 : 1);
  55:Src/usrMain.c **** 	//-----Position-----//
  56:Src/usrMain.c **** 	} else if (m->header == 8) { //set position
  57:Src/usrMain.c **** 		uint16_t position = (m->payload[0] << 8) | m->payload[1];
  58:Src/usrMain.c **** 		position = CLAMP_VALUE(position, 100, 3500);
  59:Src/usrMain.c **** 
  60:Src/usrMain.c **** 		positionPid.setpoint = ((int32_t)position * ENC_CNT_SCALE / 3600);
  61:Src/usrMain.c **** 
  62:Src/usrMain.c **** 		modeNow = POSITION;
  63:Src/usrMain.c **** 		if (!positionPid.on) {
  64:Src/usrMain.c **** 			positionPid.output = 0;
  65:Src/usrMain.c **** 			pidStart(&positionPid);
  66:Src/usrMain.c **** 		}
  67:Src/usrMain.c **** 	} else if (m->header == 18) { //request position
  68:Src/usrMain.c **** 		if (m->payload[0] == 0)
  69:Src/usrMain.c **** 			positionInfoPeriodMs = 0;
  70:Src/usrMain.c **** 		else
  71:Src/usrMain.c **** 			positionInfoPeriodMs = 1000 / m->payload[0];
  72:Src/usrMain.c **** 	} else if (m->header == 38) { //config position
  73:Src/usrMain.c **** 		uint16_t position = (m->payload[0] << 8) | m->payload[1];
  74:Src/usrMain.c **** 
  75:Src/usrMain.c **** 		ENC_CNT = ((int32_t)position * ENC_CNT_SCALE / 3600);
  76:Src/usrMain.c **** 
  77:Src/usrMain.c **** 		CanMessage toSend;
  78:Src/usrMain.c **** 		toSend.id = 1;
  79:Src/usrMain.c **** 		toSend.dlc = 2;
  80:Src/usrMain.c **** 		*((uint16_t*)toSend.data) = ENC_CNT;
  81:Src/usrMain.c **** 		if (canSendMessage(can2Handle, &toSend))
  82:Src/usrMain.c **** 			; //error sending config
  83:Src/usrMain.c **** 	}
  84:Src/usrMain.c **** }
  85:Src/usrMain.c **** 
  86:Src/usrMain.c **** int usrMain()
ARM GAS  /tmp/ccoEKpII.s 			page 3


  87:Src/usrMain.c **** {
  30              		.loc 1 87 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 24
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 70B5     		push	{r4, r5, r6, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
  41 0002 88B0     		sub	sp, sp, #32
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 48
  88:Src/usrMain.c **** 	memset(&positionPid, 0, sizeof(positionPid));
  44              		.loc 1 88 0
  45 0004 BC49     		ldr	r1, .L27
  46 0006 0022     		movs	r2, #0
  47 0008 4A60     		str	r2, [r1, #4]
  48 000a 01F10C03 		add	r3, r1, #12
  49 000e 43F8042B 		str	r2, [r3], #4
  50 0012 43F8042B 		str	r2, [r3], #4
  51 0016 43F8042B 		str	r2, [r3], #4
  52 001a 43F8042B 		str	r2, [r3], #4
  53 001e 43F8042B 		str	r2, [r3], #4
  54 0022 43F8042B 		str	r2, [r3], #4
  55 0026 43F8042B 		str	r2, [r3], #4
  56 002a 43F8042B 		str	r2, [r3], #4
  57 002e 43F8042B 		str	r2, [r3], #4
  58 0032 1A60     		str	r2, [r3]
  89:Src/usrMain.c **** 	positionPid.Kp = POSITION_KP;
  59              		.loc 1 89 0
  60 0034 B14B     		ldr	r3, .L27+4
  61 0036 0B60     		str	r3, [r1]	@ float
  90:Src/usrMain.c **** 	positionPid.Ki = POSITION_KI;
  91:Src/usrMain.c **** 	positionPid.Kd = POSITION_KD;
  62              		.loc 1 91 0
  63 0038 B14B     		ldr	r3, .L27+8
  64 003a 8B60     		str	r3, [r1, #8]	@ float
  92:Src/usrMain.c **** 	positionPid.outputMax = 1000.f;
  65              		.loc 1 92 0
  66 003c B14B     		ldr	r3, .L27+12
  67 003e 8B61     		str	r3, [r1, #24]	@ float
  93:Src/usrMain.c **** 	positionPid.outputMin = -1000.f;
  68              		.loc 1 93 0
  69 0040 B14B     		ldr	r3, .L27+16
  70 0042 CB61     		str	r3, [r1, #28]	@ float
  94:Src/usrMain.c **** 	positionPid.period = 1;
  71              		.loc 1 94 0
  72 0044 0124     		movs	r4, #1
  73 0046 8C62     		str	r4, [r1, #40]
  74              	.LVL0:
  75              	.LBB14:
  95:Src/usrMain.c **** 
  96:Src/usrMain.c **** 	for (int i = 1; i <= 3; ++i)
  76              		.loc 1 96 0
ARM GAS  /tmp/ccoEKpII.s 			page 4


  77 0048 04E0     		b	.L2
  78              	.LVL1:
  79              	.L3:
  97:Src/usrMain.c **** 		led(i, 0);
  80              		.loc 1 97 0 discriminator 3
  81 004a E0B2     		uxtb	r0, r4
  82 004c 0021     		movs	r1, #0
  83 004e FFF7FEFF 		bl	led
  84              	.LVL2:
  96:Src/usrMain.c **** 		led(i, 0);
  85              		.loc 1 96 0 discriminator 3
  86 0052 0134     		adds	r4, r4, #1
  87              	.LVL3:
  88              	.L2:
  96:Src/usrMain.c **** 		led(i, 0);
  89              		.loc 1 96 0 is_stmt 0 discriminator 1
  90 0054 032C     		cmp	r4, #3
  91 0056 F8DD     		ble	.L3
  92              	.LBE14:
  98:Src/usrMain.c **** 	HAL_Delay(500);
  93              		.loc 1 98 0 is_stmt 1
  94 0058 4FF4FA70 		mov	r0, #500
  95 005c FFF7FEFF 		bl	HAL_Delay
  96              	.LVL4:
  97              	.LBB15:
  99:Src/usrMain.c **** 
 100:Src/usrMain.c **** 	for (int i = 1; i <= 3; ++i) {
  98              		.loc 1 100 0
  99 0060 0124     		movs	r4, #1
 100              	.LVL5:
 101 0062 07E0     		b	.L4
 102              	.LVL6:
 103              	.L5:
 101:Src/usrMain.c **** 		led(i, 1);
 104              		.loc 1 101 0 discriminator 3
 105 0064 E0B2     		uxtb	r0, r4
 106 0066 0121     		movs	r1, #1
 107 0068 FFF7FEFF 		bl	led
 108              	.LVL7:
 102:Src/usrMain.c **** 		HAL_Delay(100);
 109              		.loc 1 102 0 discriminator 3
 110 006c 6420     		movs	r0, #100
 111 006e FFF7FEFF 		bl	HAL_Delay
 112              	.LVL8:
 100:Src/usrMain.c **** 		led(i, 1);
 113              		.loc 1 100 0 discriminator 3
 114 0072 0134     		adds	r4, r4, #1
 115              	.LVL9:
 116              	.L4:
 100:Src/usrMain.c **** 		led(i, 1);
 117              		.loc 1 100 0 is_stmt 0 discriminator 1
 118 0074 032C     		cmp	r4, #3
 119 0076 F5DD     		ble	.L5
 120 0078 0324     		movs	r4, #3
 121              	.LVL10:
 122 007a 07E0     		b	.L6
 123              	.LVL11:
ARM GAS  /tmp/ccoEKpII.s 			page 5


 124              	.L7:
 125              	.LBE15:
 126              	.LBB16:
 103:Src/usrMain.c **** 	}
 104:Src/usrMain.c **** 	for (int i = 3; i >= 1; --i) {
 105:Src/usrMain.c **** 		led(i, 0);
 127              		.loc 1 105 0 is_stmt 1 discriminator 3
 128 007c E0B2     		uxtb	r0, r4
 129 007e 0021     		movs	r1, #0
 130 0080 FFF7FEFF 		bl	led
 131              	.LVL12:
 106:Src/usrMain.c **** 		HAL_Delay(100);
 132              		.loc 1 106 0 discriminator 3
 133 0084 6420     		movs	r0, #100
 134 0086 FFF7FEFF 		bl	HAL_Delay
 135              	.LVL13:
 104:Src/usrMain.c **** 		led(i, 0);
 136              		.loc 1 104 0 discriminator 3
 137 008a 013C     		subs	r4, r4, #1
 138              	.LVL14:
 139              	.L6:
 104:Src/usrMain.c **** 		led(i, 0);
 140              		.loc 1 104 0 is_stmt 0 discriminator 1
 141 008c 002C     		cmp	r4, #0
 142 008e F5DC     		bgt	.L7
 143              	.LBE16:
 107:Src/usrMain.c **** 	}
 108:Src/usrMain.c **** 
 109:Src/usrMain.c **** 	adcInit();
 144              		.loc 1 109 0 is_stmt 1
 145 0090 FFF7FEFF 		bl	adcInit
 146              	.LVL15:
 110:Src/usrMain.c **** 	motorInit();
 147              		.loc 1 110 0
 148 0094 FFF7FEFF 		bl	motorInit
 149              	.LVL16:
 111:Src/usrMain.c **** 	configCanteros(PRIMARY_ADDRESS, ADDRESSES_SIZE, myAddresses,
 150              		.loc 1 111 0
 151 0098 9C4B     		ldr	r3, .L27+20
 152 009a 0093     		str	r3, [sp]
 153 009c C420     		movs	r0, #196
 154 009e 0221     		movs	r1, #2
 155 00a0 9B4A     		ldr	r2, .L27+24
 156 00a2 0823     		movs	r3, #8
 157 00a4 FFF7FEFF 		bl	configCanteros
 158              	.LVL17:
 112:Src/usrMain.c ****                    HEADERS_SIZE, handledHeaders);
 113:Src/usrMain.c **** 	canInit(CANMODE_CANTEROS, CANMODE_RAW);
 159              		.loc 1 113 0
 160 00a8 0220     		movs	r0, #2
 161 00aa 0121     		movs	r1, #1
 162 00ac FFF7FEFF 		bl	canInit
 163              	.LVL18:
 114:Src/usrMain.c **** 	canterosInit();
 164              		.loc 1 114 0
 165 00b0 FFF7FEFF 		bl	canterosInit
 166              	.LVL19:
ARM GAS  /tmp/ccoEKpII.s 			page 6


 115:Src/usrMain.c **** 
 116:Src/usrMain.c **** 	uint16_t res1, res2;
 117:Src/usrMain.c **** 
 118:Src/usrMain.c **** 	uint32_t lastReceivedMessageMs = HAL_GetTick();
 167              		.loc 1 118 0
 168 00b4 FFF7FEFF 		bl	HAL_GetTick
 169              	.LVL20:
 170 00b8 0546     		mov	r5, r0
 171              	.LVL21:
 119:Src/usrMain.c **** 	const uint32_t MOTOR_TIMEOUT_MS = 500, RESET_TIMEOUT_MS = UINT32_MAX;
 120:Src/usrMain.c **** 	uint32_t lastSentPosInfoMs = HAL_GetTick();
 172              		.loc 1 120 0
 173 00ba FFF7FEFF 		bl	HAL_GetTick
 174              	.LVL22:
 175 00be 0646     		mov	r6, r0
 176              	.LVL23:
 177              	.L8:
 178              	.LBB17:
 121:Src/usrMain.c **** 	while (1) {
 122:Src/usrMain.c **** 		int u = adcUpdate();
 179              		.loc 1 122 0
 180 00c0 FFF7FEFF 		bl	adcUpdate
 181              	.LVL24:
 182 00c4 0446     		mov	r4, r0
 183              	.LVL25:
 123:Src/usrMain.c **** 		if (u & 1) {
 184              		.loc 1 123 0
 185 00c6 10F0010F 		tst	r0, #1
 186 00ca 01D0     		beq	.L9
 124:Src/usrMain.c **** 			res1 = adcGet1();
 187              		.loc 1 124 0
 188 00cc FFF7FEFF 		bl	adcGet1
 189              	.LVL26:
 190              	.L9:
 125:Src/usrMain.c **** 			(void)res1;
 126:Src/usrMain.c **** 		}
 127:Src/usrMain.c **** 		if (u & 2) {
 191              		.loc 1 127 0
 192 00d0 14F0020F 		tst	r4, #2
 193 00d4 01D0     		beq	.L10
 128:Src/usrMain.c **** 			res2 = adcGet2();
 194              		.loc 1 128 0
 195 00d6 FFF7FEFF 		bl	adcGet2
 196              	.LVL27:
 197              	.L10:
 129:Src/usrMain.c **** 			(void)res2;
 130:Src/usrMain.c **** 		}
 131:Src/usrMain.c **** 
 132:Src/usrMain.c **** 		canterosProcess();
 198              		.loc 1 132 0
 199 00da FFF7FEFF 		bl	canterosProcess
 200              	.LVL28:
 133:Src/usrMain.c **** 		if (canterosCheckInbox()) {
 201              		.loc 1 133 0
 202 00de FFF7FEFF 		bl	canterosCheckInbox
 203              	.LVL29:
 204 00e2 0028     		cmp	r0, #0
ARM GAS  /tmp/ccoEKpII.s 			page 7


 205 00e4 00F08D80 		beq	.L11
 206              	.LBB18:
 134:Src/usrMain.c **** 			lastReceivedMessageMs = HAL_GetTick();
 207              		.loc 1 134 0
 208 00e8 FFF7FEFF 		bl	HAL_GetTick
 209              	.LVL30:
 210 00ec 0546     		mov	r5, r0
 211              	.LVL31:
 135:Src/usrMain.c **** 			CanterosMessage message;
 136:Src/usrMain.c **** 			canterosGetNew(&message);
 212              		.loc 1 136 0
 213 00ee 02A8     		add	r0, sp, #8
 214              	.LVL32:
 215 00f0 FFF7FEFF 		bl	canterosGetNew
 216              	.LVL33:
 217              	.LBB19:
 218              	.LBB20:
  46:Src/usrMain.c **** 		modeNow = POWER;
 219              		.loc 1 46 0
 220 00f4 9DF80A30 		ldrb	r3, [sp, #10]	@ zero_extendqisi2
 221 00f8 072B     		cmp	r3, #7
 222 00fa 20D1     		bne	.L12
 223              	.LBB21:
  47:Src/usrMain.c **** 		pidStop(&positionPid);
 224              		.loc 1 47 0
 225 00fc 0122     		movs	r2, #1
 226 00fe 854B     		ldr	r3, .L27+28
 227 0100 1A70     		strb	r2, [r3]
  48:Src/usrMain.c **** 		int16_t power = ((int16_t)m->payload[0] << 8) | m->payload[1];
 228              		.loc 1 48 0
 229 0102 7D48     		ldr	r0, .L27
 230 0104 FFF7FEFF 		bl	pidStop
 231              	.LVL34:
  49:Src/usrMain.c **** #if PRIMARY_ADDRESS == 192 || PRIMARY_ADDRESS == 193
 232              		.loc 1 49 0
 233 0108 9DF80C40 		ldrb	r4, [sp, #12]	@ zero_extendqisi2
 234              	.LVL35:
 235 010c 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 236 0110 43EA0424 		orr	r4, r3, r4, lsl #8
 237              	.LVL36:
  53:Src/usrMain.c **** 		led(1, power == 0 ? 0 : 1);
 238              		.loc 1 53 0
 239 0114 20B2     		sxth	r0, r4
 240 0116 4FF47A73 		mov	r3, #1000
 241 011a 03FB00F0 		mul	r0, r3, r0
 242 011e 0028     		cmp	r0, #0
 243 0120 02DA     		bge	.L13
 244 0122 00F5FF40 		add	r0, r0, #32640
 245 0126 7F30     		adds	r0, r0, #127
 246              	.L13:
 247 0128 C013     		asrs	r0, r0, #15
 248 012a FFF7FEFF 		bl	motorSetPower
 249              	.LVL37:
  54:Src/usrMain.c **** 	//-----Position-----//
 250              		.loc 1 54 0
 251 012e 21B2     		sxth	r1, r4
 252 0130 0120     		movs	r0, #1
ARM GAS  /tmp/ccoEKpII.s 			page 8


 253 0132 0031     		adds	r1, r1, #0
 254 0134 18BF     		it	ne
 255 0136 0121     		movne	r1, #1
 256 0138 FFF7FEFF 		bl	led
 257              	.LVL38:
 258 013c 61E0     		b	.L11
 259              	.LVL39:
 260              	.L12:
 261              	.LBE21:
  56:Src/usrMain.c **** 		uint16_t position = (m->payload[0] << 8) | m->payload[1];
 262              		.loc 1 56 0
 263 013e 082B     		cmp	r3, #8
 264 0140 2CD1     		bne	.L15
 265              	.LBB22:
  57:Src/usrMain.c **** 		position = CLAMP_VALUE(position, 100, 3500);
 266              		.loc 1 57 0
 267 0142 9DF80C20 		ldrb	r2, [sp, #12]	@ zero_extendqisi2
 268 0146 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 269 014a 43EA0223 		orr	r3, r3, r2, lsl #8
 270              	.LVL40:
  58:Src/usrMain.c **** 
 271              		.loc 1 58 0
 272 014e 40F6AC52 		movw	r2, #3500
 273 0152 9342     		cmp	r3, r2
 274 0154 04D8     		bhi	.L25
 275 0156 642B     		cmp	r3, #100
 276 0158 38BF     		it	cc
 277 015a 6423     		movcc	r3, #100
 278              	.LVL41:
 279 015c 1846     		mov	r0, r3
 280 015e 01E0     		b	.L16
 281              	.LVL42:
 282              	.L25:
 283 0160 40F6AC50 		movw	r0, #3500
 284              	.LVL43:
 285              	.L16:
  60:Src/usrMain.c **** 
 286              		.loc 1 60 0
 287 0164 49F63F43 		movw	r3, #39999
 288 0168 03FB00F3 		mul	r3, r3, r0
 289 016c 6A48     		ldr	r0, .L27+32
 290              	.LVL44:
 291 016e 80FB0320 		smull	r2, r0, r0, r3
 292 0172 1844     		add	r0, r0, r3
 293 0174 DB17     		asrs	r3, r3, #31
 294 0176 604C     		ldr	r4, .L27
 295              	.LVL45:
 296 0178 C3EBE020 		rsb	r0, r3, r0, asr #11
 297 017c FFF7FEFF 		bl	__aeabi_i2f
 298              	.LVL46:
 299 0180 2061     		str	r0, [r4, #16]	@ float
  62:Src/usrMain.c **** 		if (!positionPid.on) {
 300              		.loc 1 62 0
 301 0182 0222     		movs	r2, #2
 302 0184 634B     		ldr	r3, .L27+28
 303 0186 1A70     		strb	r2, [r3]
  63:Src/usrMain.c **** 			positionPid.output = 0;
ARM GAS  /tmp/ccoEKpII.s 			page 9


 304              		.loc 1 63 0
 305 0188 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 306 018c 002B     		cmp	r3, #0
 307 018e 38D1     		bne	.L11
  64:Src/usrMain.c **** 			pidStart(&positionPid);
 308              		.loc 1 64 0
 309 0190 2046     		mov	r0, r4
 310 0192 0023     		movs	r3, #0
 311 0194 6361     		str	r3, [r4, #20]	@ float
  65:Src/usrMain.c **** 		}
 312              		.loc 1 65 0
 313 0196 FFF7FEFF 		bl	pidStart
 314              	.LVL47:
 315 019a 32E0     		b	.L11
 316              	.LVL48:
 317              	.L15:
 318              	.LBE22:
  67:Src/usrMain.c **** 		if (m->payload[0] == 0)
 319              		.loc 1 67 0
 320 019c 122B     		cmp	r3, #18
 321 019e 0DD1     		bne	.L17
  68:Src/usrMain.c **** 			positionInfoPeriodMs = 0;
 322              		.loc 1 68 0
 323 01a0 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 324 01a4 1BB9     		cbnz	r3, .L18
  69:Src/usrMain.c **** 		else
 325              		.loc 1 69 0
 326 01a6 0022     		movs	r2, #0
 327 01a8 5C4B     		ldr	r3, .L27+36
 328 01aa 1A80     		strh	r2, [r3]	@ movhi
 329 01ac 29E0     		b	.L11
 330              	.L18:
  71:Src/usrMain.c **** 	} else if (m->header == 38) { //config position
 331              		.loc 1 71 0
 332 01ae 4FF47A72 		mov	r2, #1000
 333 01b2 92FBF3F3 		sdiv	r3, r2, r3
 334 01b6 594A     		ldr	r2, .L27+36
 335 01b8 1380     		strh	r3, [r2]	@ movhi
 336 01ba 22E0     		b	.L11
 337              	.L17:
  72:Src/usrMain.c **** 		uint16_t position = (m->payload[0] << 8) | m->payload[1];
 338              		.loc 1 72 0
 339 01bc 262B     		cmp	r3, #38
 340 01be 20D1     		bne	.L11
 341              	.LBB23:
  73:Src/usrMain.c **** 
 342              		.loc 1 73 0
 343 01c0 9DF80C20 		ldrb	r2, [sp, #12]	@ zero_extendqisi2
 344 01c4 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 345 01c8 43EA0222 		orr	r2, r3, r2, lsl #8
 346              	.LVL49:
  75:Src/usrMain.c **** 
 347              		.loc 1 75 0
 348 01cc 49F63F43 		movw	r3, #39999
 349 01d0 03FB02F3 		mul	r3, r3, r2
 350 01d4 504A     		ldr	r2, .L27+32
 351              	.LVL50:
ARM GAS  /tmp/ccoEKpII.s 			page 10


 352 01d6 82FB0312 		smull	r1, r2, r2, r3
 353 01da 1A44     		add	r2, r2, r3
 354 01dc DB17     		asrs	r3, r3, #31
 355 01de C3EBE223 		rsb	r3, r3, r2, asr #11
 356 01e2 9BB2     		uxth	r3, r3
 357 01e4 4E4A     		ldr	r2, .L27+40
 358 01e6 1380     		strh	r3, [r2]	@ movhi
  78:Src/usrMain.c **** 		toSend.dlc = 2;
 359              		.loc 1 78 0
 360 01e8 0122     		movs	r2, #1
 361 01ea ADF81420 		strh	r2, [sp, #20]	@ movhi
  79:Src/usrMain.c **** 		*((uint16_t*)toSend.data) = ENC_CNT;
 362              		.loc 1 79 0
 363 01ee 0222     		movs	r2, #2
 364 01f0 8DF81620 		strb	r2, [sp, #22]
  80:Src/usrMain.c **** 		if (canSendMessage(can2Handle, &toSend))
 365              		.loc 1 80 0
 366 01f4 ADF81730 		strh	r3, [sp, #23]	@ unaligned
  81:Src/usrMain.c **** 			; //error sending config
 367              		.loc 1 81 0
 368 01f8 4A4B     		ldr	r3, .L27+44
 369 01fa 1868     		ldr	r0, [r3]
 370 01fc 05A9     		add	r1, sp, #20
 371 01fe FFF7FEFF 		bl	canSendMessage
 372              	.LVL51:
 373              	.L11:
 374              	.LBE23:
 375              	.LBE20:
 376              	.LBE19:
 377              	.LBE18:
 137:Src/usrMain.c **** 			handleMessage(&message);
 138:Src/usrMain.c **** 		}
 139:Src/usrMain.c **** 
 140:Src/usrMain.c **** 		if (canCheckInbox(can2Handle)) {
 378              		.loc 1 140 0
 379 0202 484B     		ldr	r3, .L27+44
 380 0204 1868     		ldr	r0, [r3]
 381 0206 FFF7FEFF 		bl	canCheckInbox
 382              	.LVL52:
 383 020a 60B1     		cbz	r0, .L19
 384              	.LBB24:
 141:Src/usrMain.c **** 			CanMessage received;
 142:Src/usrMain.c **** 			canGetNew(can2Handle, &received);
 385              		.loc 1 142 0
 386 020c 454B     		ldr	r3, .L27+44
 387 020e 1868     		ldr	r0, [r3]
 388 0210 05A9     		add	r1, sp, #20
 389 0212 FFF7FEFF 		bl	canGetNew
 390              	.LVL53:
 143:Src/usrMain.c **** 			ENC_CNT = *((uint16_t*)received.data);
 391              		.loc 1 143 0
 392 0216 BDF81720 		ldrh	r2, [sp, #23]	@ unaligned
 393 021a 414B     		ldr	r3, .L27+40
 394 021c 1A80     		strh	r2, [r3]	@ movhi
 144:Src/usrMain.c **** 			indexPulsePosition = *((uint16_t*)received.data + 1);
 395              		.loc 1 144 0
 396 021e BDF81920 		ldrh	r2, [sp, #25]	@ unaligned
ARM GAS  /tmp/ccoEKpII.s 			page 11


 397 0222 414B     		ldr	r3, .L27+48
 398 0224 1A80     		strh	r2, [r3]	@ movhi
 399              	.L19:
 400              	.LBE24:
 145:Src/usrMain.c **** 		}
 146:Src/usrMain.c **** 
 147:Src/usrMain.c **** 		if (modeNow == POSITION) {
 401              		.loc 1 147 0
 402 0226 3B4B     		ldr	r3, .L27+28
 403 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 404 022a 022B     		cmp	r3, #2
 405 022c 12D1     		bne	.L20
 148:Src/usrMain.c **** 			positionPid.input = ENC_CNT;
 406              		.loc 1 148 0
 407 022e 324C     		ldr	r4, .L27
 408 0230 3B4B     		ldr	r3, .L27+40
 409 0232 1888     		ldrh	r0, [r3]
 410 0234 FFF7FEFF 		bl	__aeabi_ui2f
 411              	.LVL54:
 412 0238 E060     		str	r0, [r4, #12]	@ float
 149:Src/usrMain.c **** 			if (pidCompute(&positionPid))
 413              		.loc 1 149 0
 414 023a 2046     		mov	r0, r4
 415 023c FFF7FEFF 		bl	pidCompute
 416              	.LVL55:
 417 0240 20B1     		cbz	r0, .L21
 150:Src/usrMain.c **** 				motorSetPower(positionPid.output * (PID_REVERSED ? -1 : 1));
 418              		.loc 1 150 0
 419 0242 6069     		ldr	r0, [r4, #20]	@ float
 420 0244 FFF7FEFF 		bl	__aeabi_f2iz
 421              	.LVL56:
 422 0248 FFF7FEFF 		bl	motorSetPower
 423              	.LVL57:
 424              	.L21:
 151:Src/usrMain.c **** 			led(1,1);
 425              		.loc 1 151 0
 426 024c 0120     		movs	r0, #1
 427 024e 0146     		mov	r1, r0
 428 0250 FFF7FEFF 		bl	led
 429              	.LVL58:
 430              	.L20:
 152:Src/usrMain.c **** 		}
 153:Src/usrMain.c **** 
 154:Src/usrMain.c **** 		uint32_t nowMs = HAL_GetTick();
 431              		.loc 1 154 0
 432 0254 FFF7FEFF 		bl	HAL_GetTick
 433              	.LVL59:
 434 0258 0446     		mov	r4, r0
 435              	.LVL60:
 155:Src/usrMain.c **** 		if (nowMs - lastReceivedMessageMs > MOTOR_TIMEOUT_MS) {
 436              		.loc 1 155 0
 437 025a 431B     		subs	r3, r0, r5
 438 025c B3F5FA7F 		cmp	r3, #500
 439 0260 0CD9     		bls	.L22
 156:Src/usrMain.c **** 			motorSetPower(0);
 440              		.loc 1 156 0
 441 0262 0020     		movs	r0, #0
ARM GAS  /tmp/ccoEKpII.s 			page 12


 442              	.LVL61:
 443 0264 FFF7FEFF 		bl	motorSetPower
 444              	.LVL62:
 157:Src/usrMain.c **** 			led(1, 0);
 445              		.loc 1 157 0
 446 0268 0120     		movs	r0, #1
 447 026a 0021     		movs	r1, #0
 448 026c FFF7FEFF 		bl	led
 449              	.LVL63:
 158:Src/usrMain.c **** 
 159:Src/usrMain.c **** 			modeNow = OFF;
 450              		.loc 1 159 0
 451 0270 0022     		movs	r2, #0
 452 0272 284B     		ldr	r3, .L27+28
 453 0274 1A70     		strb	r2, [r3]
 160:Src/usrMain.c **** 			pidStop(&positionPid);
 454              		.loc 1 160 0
 455 0276 2048     		ldr	r0, .L27
 456 0278 FFF7FEFF 		bl	pidStop
 457              	.LVL64:
 458              	.L22:
 161:Src/usrMain.c **** 		}
 162:Src/usrMain.c **** 		if (positionInfoPeriodMs && nowMs - lastSentPosInfoMs > positionInfoPeriodMs) {
 459              		.loc 1 162 0
 460 027c 274B     		ldr	r3, .L27+36
 461 027e 1B88     		ldrh	r3, [r3]
 462 0280 002B     		cmp	r3, #0
 463 0282 3FF41DAF 		beq	.L8
 464              		.loc 1 162 0 is_stmt 0 discriminator 1
 465 0286 A21B     		subs	r2, r4, r6
 466 0288 9A42     		cmp	r2, r3
 467 028a 7FF619AF 		bls	.L8
 468              	.LVL65:
 469              	.LBB25:
 163:Src/usrMain.c **** 			lastSentPosInfoMs = nowMs;
 164:Src/usrMain.c **** 			CanterosMessage toSend;
 165:Src/usrMain.c **** 			toSend.header = 28;
 470              		.loc 1 165 0 is_stmt 1
 471 028e 1C23     		movs	r3, #28
 472 0290 8DF81630 		strb	r3, [sp, #22]
 166:Src/usrMain.c **** 			toSend.payloadSize = 4;
 473              		.loc 1 166 0
 474 0294 0423     		movs	r3, #4
 475 0296 8DF81730 		strb	r3, [sp, #23]
 167:Src/usrMain.c **** 			uint16_t posToSend = ((int32_t)ENC_CNT * 3600 / ENC_CNT_SCALE);
 476              		.loc 1 167 0
 477 029a 214B     		ldr	r3, .L27+40
 478 029c 1988     		ldrh	r1, [r3]
 479 029e 4FF46162 		mov	r2, #3600
 480 02a2 02FB01F1 		mul	r1, r2, r1
 481 02a6 2148     		ldr	r0, .L27+52
 482 02a8 80FB0163 		smull	r6, r3, r0, r1
 483 02ac 0B44     		add	r3, r3, r1
 484 02ae C917     		asrs	r1, r1, #31
 485 02b0 C1EBE331 		rsb	r1, r1, r3, asr #15
 486              	.LVL66:
 168:Src/usrMain.c **** 			uint16_t indexToSend = ((int32_t)indexPulsePosition * 3600 / ENC_CNT_SCALE);
ARM GAS  /tmp/ccoEKpII.s 			page 13


 487              		.loc 1 168 0
 488 02b4 1C4B     		ldr	r3, .L27+48
 489 02b6 1B88     		ldrh	r3, [r3]
 490 02b8 9BB2     		uxth	r3, r3
 491 02ba 02FB03F3 		mul	r3, r2, r3
 492 02be 80FB0320 		smull	r2, r0, r0, r3
 493 02c2 1844     		add	r0, r0, r3
 494 02c4 DB17     		asrs	r3, r3, #31
 495 02c6 C3EBE033 		rsb	r3, r3, r0, asr #15
 496              	.LVL67:
 169:Src/usrMain.c **** 			toSend.payload[0] = posToSend >> 8;
 497              		.loc 1 169 0
 498 02ca C1F30722 		ubfx	r2, r1, #8, #8
 499 02ce 8DF81820 		strb	r2, [sp, #24]
 170:Src/usrMain.c **** 			toSend.payload[1] = posToSend & 0xff;
 500              		.loc 1 170 0
 501 02d2 8DF81910 		strb	r1, [sp, #25]
 171:Src/usrMain.c **** 			toSend.payload[2] = indexToSend >> 8;
 502              		.loc 1 171 0
 503 02d6 C3F30722 		ubfx	r2, r3, #8, #8
 504 02da 8DF81A20 		strb	r2, [sp, #26]
 172:Src/usrMain.c **** 			toSend.payload[3] = indexToSend & 0xff;
 505              		.loc 1 172 0
 506 02de 8DF81B30 		strb	r3, [sp, #27]
 173:Src/usrMain.c **** 			HAL_StatusTypeDef res = canterosSendMessage(&toSend);
 507              		.loc 1 173 0
 508 02e2 05A8     		add	r0, sp, #20
 509 02e4 FFF7FEFF 		bl	canterosSendMessage
 510              	.LVL68:
 174:Src/usrMain.c **** 			if (res) {
 511              		.loc 1 174 0
 512 02e8 18B1     		cbz	r0, .L24
 175:Src/usrMain.c **** 				//Error in sending status
 176:Src/usrMain.c **** 				led(2, 1);
 513              		.loc 1 176 0
 514 02ea 0220     		movs	r0, #2
 515              	.LVL69:
 516 02ec 0121     		movs	r1, #1
 517 02ee FFF7FEFF 		bl	led
 518              	.LVL70:
 519              	.L24:
 163:Src/usrMain.c **** 			CanterosMessage toSend;
 520              		.loc 1 163 0
 521 02f2 2646     		mov	r6, r4
 522 02f4 E4E6     		b	.L8
 523              	.L28:
 524 02f6 00BF     		.align	2
 525              	.L27:
 526 02f8 00000000 		.word	.LANCHOR0
 527 02fc 0000A040 		.word	1084227584
 528 0300 0AD7A33B 		.word	1000593162
 529 0304 00007A44 		.word	1148846080
 530 0308 00007AC4 		.word	-998637568
 531 030c 00000000 		.word	.LANCHOR2
 532 0310 00000000 		.word	.LANCHOR1
 533 0314 00000000 		.word	.LANCHOR3
 534 0318 C5B3A291 		.word	-1851608123
ARM GAS  /tmp/ccoEKpII.s 			page 14


 535 031c 00000000 		.word	.LANCHOR4
 536 0320 00000000 		.word	.LANCHOR5
 537 0324 00000000 		.word	can2Handle
 538 0328 00000000 		.word	.LANCHOR6
 539 032c F56EB8D1 		.word	-776442123
 540              	.LBE25:
 541              	.LBE17:
 542              		.cfi_endproc
 543              	.LFE64:
 545              		.section	.rodata.myAddresses,"a",%progbits
 546              		.align	2
 547              		.set	.LANCHOR1,. + 0
 550              	myAddresses:
 551 0000 B400     		.short	180
 552 0002 C400     		.short	196
 553              		.section	.bss.modeNow,"aw",%nobits
 554              		.set	.LANCHOR3,. + 0
 557              	modeNow:
 558 0000 00       		.space	1
 559              		.section	.bss.positionPid,"aw",%nobits
 560              		.align	2
 561              		.set	.LANCHOR0,. + 0
 564              	positionPid:
 565 0000 00000000 		.space	52
 565      00000000 
 565      00000000 
 565      00000000 
 565      00000000 
 566              		.section	.bss.positionInfoPeriodMs,"aw",%nobits
 567              		.align	1
 568              		.set	.LANCHOR4,. + 0
 571              	positionInfoPeriodMs:
 572 0000 0000     		.space	2
 573              		.section	.bss.ENC_CNT,"aw",%nobits
 574              		.align	1
 575              		.set	.LANCHOR5,. + 0
 578              	ENC_CNT:
 579 0000 0000     		.space	2
 580              		.section	.data.indexPulsePosition,"aw",%progbits
 581              		.align	1
 582              		.set	.LANCHOR6,. + 0
 585              	indexPulsePosition:
 586 0000 FFFF     		.short	-1
 587              		.section	.rodata.handledHeaders,"a",%progbits
 588              		.align	2
 589              		.set	.LANCHOR2,. + 0
 592              	handledHeaders:
 593 0000 07       		.byte	7
 594 0001 11       		.byte	17
 595 0002 08       		.byte	8
 596 0003 12       		.byte	18
 597 0004 26       		.byte	38
 598 0005 09       		.byte	9
 599 0006 13       		.byte	19
 600 0007 14       		.byte	20
 601              		.text
 602              	.Letext0:
ARM GAS  /tmp/ccoEKpII.s 			page 15


 603              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 604              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 605              		.file 4 "../../shared/firmware/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 606              		.file 5 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 607              		.file 6 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 608              		.file 7 "../../shared/firmware/Inc/can.h"
 609              		.file 8 "../../shared/firmware/Inc/canteros.h"
 610              		.file 9 "../../shared/firmware/Inc/pid.h"
 611              		.file 10 "../../shared/firmware/Drivers/CMSIS/Include/core_cm3.h"
 612              		.file 11 "../../shared/firmware/Inc/globals.h"
 613              		.file 12 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 614              		.file 13 "Inc/motor.h"
 615              		.file 14 "Inc/adc.h"
ARM GAS  /tmp/ccoEKpII.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usrMain.c
     /tmp/ccoEKpII.s:22     .text.usrMain:0000000000000000 $t
     /tmp/ccoEKpII.s:27     .text.usrMain:0000000000000000 usrMain
     /tmp/ccoEKpII.s:526    .text.usrMain:00000000000002f8 $d
     /tmp/ccoEKpII.s:546    .rodata.myAddresses:0000000000000000 $d
     /tmp/ccoEKpII.s:550    .rodata.myAddresses:0000000000000000 myAddresses
     /tmp/ccoEKpII.s:557    .bss.modeNow:0000000000000000 modeNow
     /tmp/ccoEKpII.s:558    .bss.modeNow:0000000000000000 $d
     /tmp/ccoEKpII.s:560    .bss.positionPid:0000000000000000 $d
     /tmp/ccoEKpII.s:564    .bss.positionPid:0000000000000000 positionPid
     /tmp/ccoEKpII.s:567    .bss.positionInfoPeriodMs:0000000000000000 $d
     /tmp/ccoEKpII.s:571    .bss.positionInfoPeriodMs:0000000000000000 positionInfoPeriodMs
     /tmp/ccoEKpII.s:574    .bss.ENC_CNT:0000000000000000 $d
     /tmp/ccoEKpII.s:578    .bss.ENC_CNT:0000000000000000 ENC_CNT
     /tmp/ccoEKpII.s:581    .data.indexPulsePosition:0000000000000000 $d
     /tmp/ccoEKpII.s:585    .data.indexPulsePosition:0000000000000000 indexPulsePosition
     /tmp/ccoEKpII.s:588    .rodata.handledHeaders:0000000000000000 $d
     /tmp/ccoEKpII.s:592    .rodata.handledHeaders:0000000000000000 handledHeaders
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_ui2f
__aeabi_f2iz
led
HAL_Delay
adcInit
motorInit
configCanteros
canInit
canterosInit
HAL_GetTick
adcUpdate
adcGet1
adcGet2
canterosProcess
canterosCheckInbox
canterosGetNew
pidStop
motorSetPower
pidStart
canSendMessage
canCheckInbox
canGetNew
pidCompute
canterosSendMessage
can2Handle

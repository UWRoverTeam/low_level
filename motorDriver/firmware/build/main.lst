ARM GAS  /tmp/ccjEuVCe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	MX_GPIO_Init:
  24              	.LFB72:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccjEuVCe.s 			page 2


  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f1xx_hal.h"
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE BEGIN Includes */
  43:Src/main.c    **** #include "globals.h"
  44:Src/main.c    **** #include "usrMain.h"
  45:Src/main.c    **** /* USER CODE END Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** ADC_HandleTypeDef hadc1;
  49:Src/main.c    **** ADC_HandleTypeDef hadc2;
  50:Src/main.c    **** 
  51:Src/main.c    **** CAN_HandleTypeDef hcan1;
  52:Src/main.c    **** CAN_HandleTypeDef hcan2;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim3;
  55:Src/main.c    **** 
  56:Src/main.c    **** UART_HandleTypeDef huart4;
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE BEGIN PV */
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_CAN1_Init(void);
  68:Src/main.c    **** static void MX_CAN2_Init(void);
  69:Src/main.c    **** static void MX_USART1_UART_Init(void);
  70:Src/main.c    **** static void MX_UART4_Init(void);
  71:Src/main.c    **** static void MX_TIM3_Init(void);
  72:Src/main.c    **** static void MX_ADC1_Init(void);
  73:Src/main.c    **** static void MX_ADC2_Init(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  76:Src/main.c    ****                                 
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE BEGIN PFP */
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE END PFP */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE BEGIN 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE END 0 */
  86:Src/main.c    **** 
  87:Src/main.c    **** /**
  88:Src/main.c    ****   * @brief  The application entry point.
  89:Src/main.c    ****   *
  90:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccjEuVCe.s 			page 3


  91:Src/main.c    ****   */
  92:Src/main.c    **** int main(void)
  93:Src/main.c    **** {
  94:Src/main.c    ****   /* USER CODE BEGIN 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 101:Src/main.c    ****   HAL_Init();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Configure the system clock */
 108:Src/main.c    ****   SystemClock_Config();
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE END SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* Initialize all configured peripherals */
 115:Src/main.c    ****   MX_GPIO_Init();
 116:Src/main.c    ****   MX_CAN1_Init();
 117:Src/main.c    ****   MX_CAN2_Init();
 118:Src/main.c    ****   MX_USART1_UART_Init();
 119:Src/main.c    ****   MX_UART4_Init();
 120:Src/main.c    ****   MX_TIM3_Init();
 121:Src/main.c    ****   MX_ADC1_Init();
 122:Src/main.c    ****   MX_ADC2_Init();
 123:Src/main.c    ****   /* USER CODE BEGIN 2 */
 124:Src/main.c    **** 	adc1Handle = &hadc1;
 125:Src/main.c    **** 	adc2Handle = &hadc2;
 126:Src/main.c    **** 	can1Handle = &hcan1;
 127:Src/main.c    **** 	can2Handle = &hcan2;
 128:Src/main.c    **** 	tim3Handle = &htim3;
 129:Src/main.c    **** 	usrMain();
 130:Src/main.c    ****   /* USER CODE END 2 */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* Infinite loop */
 133:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 134:Src/main.c    ****   while (1)
 135:Src/main.c    ****   {
 136:Src/main.c    ****   /* USER CODE END WHILE */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN 3 */
 139:Src/main.c    **** 
 140:Src/main.c    ****   }
 141:Src/main.c    ****   /* USER CODE END 3 */
 142:Src/main.c    **** 
 143:Src/main.c    **** }
 144:Src/main.c    **** 
 145:Src/main.c    **** /**
 146:Src/main.c    ****   * @brief System Clock Configuration
 147:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccjEuVCe.s 			page 4


 148:Src/main.c    ****   */
 149:Src/main.c    **** void SystemClock_Config(void)
 150:Src/main.c    **** {
 151:Src/main.c    **** 
 152:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 154:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 155:Src/main.c    **** 
 156:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 157:Src/main.c    ****     */
 158:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 159:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 160:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 161:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 162:Src/main.c    ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 165:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 166:Src/main.c    ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 167:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 168:Src/main.c    ****   {
 169:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 170:Src/main.c    ****   }
 171:Src/main.c    **** 
 172:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 173:Src/main.c    ****     */
 174:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 176:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    **** 
 181:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 184:Src/main.c    ****   }
 185:Src/main.c    **** 
 186:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 187:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 188:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 189:Src/main.c    ****   {
 190:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 191:Src/main.c    ****   }
 192:Src/main.c    **** 
 193:Src/main.c    ****     /**Configure the Systick interrupt time 
 194:Src/main.c    ****     */
 195:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 196:Src/main.c    **** 
 197:Src/main.c    ****     /**Configure the Systick 
 198:Src/main.c    ****     */
 199:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 200:Src/main.c    **** 
 201:Src/main.c    ****     /**Configure the Systick interrupt time 
 202:Src/main.c    ****     */
 203:Src/main.c    ****   __HAL_RCC_PLLI2S_ENABLE();
 204:Src/main.c    **** 
ARM GAS  /tmp/ccjEuVCe.s 			page 5


 205:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 206:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** /* ADC1 init function */
 210:Src/main.c    **** static void MX_ADC1_Init(void)
 211:Src/main.c    **** {
 212:Src/main.c    **** 
 213:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 214:Src/main.c    **** 
 215:Src/main.c    ****     /**Common config 
 216:Src/main.c    ****     */
 217:Src/main.c    ****   hadc1.Instance = ADC1;
 218:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 219:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 220:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 221:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 222:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 223:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 224:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 225:Src/main.c    ****   {
 226:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 227:Src/main.c    ****   }
 228:Src/main.c    **** 
 229:Src/main.c    ****     /**Configure Regular Channel 
 230:Src/main.c    ****     */
 231:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_10;
 232:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 233:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 234:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 235:Src/main.c    ****   {
 236:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 237:Src/main.c    ****   }
 238:Src/main.c    **** 
 239:Src/main.c    **** }
 240:Src/main.c    **** 
 241:Src/main.c    **** /* ADC2 init function */
 242:Src/main.c    **** static void MX_ADC2_Init(void)
 243:Src/main.c    **** {
 244:Src/main.c    **** 
 245:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 246:Src/main.c    **** 
 247:Src/main.c    ****     /**Common config 
 248:Src/main.c    ****     */
 249:Src/main.c    ****   hadc2.Instance = ADC2;
 250:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 251:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 252:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 253:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 254:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 255:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 256:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 257:Src/main.c    ****   {
 258:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 259:Src/main.c    ****   }
 260:Src/main.c    **** 
 261:Src/main.c    ****     /**Configure Regular Channel 
ARM GAS  /tmp/ccjEuVCe.s 			page 6


 262:Src/main.c    ****     */
 263:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_11;
 264:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 265:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 266:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 267:Src/main.c    ****   {
 268:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 269:Src/main.c    ****   }
 270:Src/main.c    **** 
 271:Src/main.c    **** }
 272:Src/main.c    **** 
 273:Src/main.c    **** /* CAN1 init function */
 274:Src/main.c    **** static void MX_CAN1_Init(void)
 275:Src/main.c    **** {
 276:Src/main.c    **** 
 277:Src/main.c    ****   hcan1.Instance = CAN1;
 278:Src/main.c    ****   hcan1.Init.Prescaler = 9;
 279:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 280:Src/main.c    ****   hcan1.Init.SJW = CAN_SJW_1TQ;
 281:Src/main.c    ****   hcan1.Init.BS1 = CAN_BS1_13TQ;
 282:Src/main.c    ****   hcan1.Init.BS2 = CAN_BS2_2TQ;
 283:Src/main.c    ****   hcan1.Init.TTCM = DISABLE;
 284:Src/main.c    ****   hcan1.Init.ABOM = DISABLE;
 285:Src/main.c    ****   hcan1.Init.AWUM = DISABLE;
 286:Src/main.c    ****   hcan1.Init.NART = DISABLE;
 287:Src/main.c    ****   hcan1.Init.RFLM = DISABLE;
 288:Src/main.c    ****   hcan1.Init.TXFP = DISABLE;
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 292:Src/main.c    ****   }
 293:Src/main.c    **** 
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** /* CAN2 init function */
 297:Src/main.c    **** static void MX_CAN2_Init(void)
 298:Src/main.c    **** {
 299:Src/main.c    **** 
 300:Src/main.c    ****   hcan2.Instance = CAN2;
 301:Src/main.c    ****   hcan2.Init.Prescaler = 9;
 302:Src/main.c    ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 303:Src/main.c    ****   hcan2.Init.SJW = CAN_SJW_1TQ;
 304:Src/main.c    ****   hcan2.Init.BS1 = CAN_BS1_13TQ;
 305:Src/main.c    ****   hcan2.Init.BS2 = CAN_BS2_2TQ;
 306:Src/main.c    ****   hcan2.Init.TTCM = DISABLE;
 307:Src/main.c    ****   hcan2.Init.ABOM = DISABLE;
 308:Src/main.c    ****   hcan2.Init.AWUM = DISABLE;
 309:Src/main.c    ****   hcan2.Init.NART = DISABLE;
 310:Src/main.c    ****   hcan2.Init.RFLM = DISABLE;
 311:Src/main.c    ****   hcan2.Init.TXFP = DISABLE;
 312:Src/main.c    ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 313:Src/main.c    ****   {
 314:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 315:Src/main.c    ****   }
 316:Src/main.c    **** 
 317:Src/main.c    **** }
 318:Src/main.c    **** 
ARM GAS  /tmp/ccjEuVCe.s 			page 7


 319:Src/main.c    **** /* TIM3 init function */
 320:Src/main.c    **** static void MX_TIM3_Init(void)
 321:Src/main.c    **** {
 322:Src/main.c    **** 
 323:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 324:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 325:Src/main.c    **** 
 326:Src/main.c    ****   htim3.Instance = TIM3;
 327:Src/main.c    ****   htim3.Init.Prescaler = 0;
 328:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 329:Src/main.c    ****   htim3.Init.Period = 999;
 330:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 331:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 332:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 333:Src/main.c    ****   {
 334:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 335:Src/main.c    ****   }
 336:Src/main.c    **** 
 337:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 338:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 339:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 340:Src/main.c    ****   {
 341:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 342:Src/main.c    ****   }
 343:Src/main.c    **** 
 344:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 345:Src/main.c    ****   sConfigOC.Pulse = 0;
 346:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 347:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 348:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 349:Src/main.c    ****   {
 350:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 351:Src/main.c    ****   }
 352:Src/main.c    **** 
 353:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 354:Src/main.c    **** 
 355:Src/main.c    **** }
 356:Src/main.c    **** 
 357:Src/main.c    **** /* UART4 init function */
 358:Src/main.c    **** static void MX_UART4_Init(void)
 359:Src/main.c    **** {
 360:Src/main.c    **** 
 361:Src/main.c    ****   huart4.Instance = UART4;
 362:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 363:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 364:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 365:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 366:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 367:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 368:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 369:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 372:Src/main.c    ****   }
 373:Src/main.c    **** 
 374:Src/main.c    **** }
 375:Src/main.c    **** 
ARM GAS  /tmp/ccjEuVCe.s 			page 8


 376:Src/main.c    **** /* USART1 init function */
 377:Src/main.c    **** static void MX_USART1_UART_Init(void)
 378:Src/main.c    **** {
 379:Src/main.c    **** 
 380:Src/main.c    ****   huart1.Instance = USART1;
 381:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 382:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 383:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 384:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 385:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 386:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 387:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 388:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 389:Src/main.c    ****   {
 390:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 391:Src/main.c    ****   }
 392:Src/main.c    **** 
 393:Src/main.c    **** }
 394:Src/main.c    **** 
 395:Src/main.c    **** /** Configure pins as 
 396:Src/main.c    ****         * Analog 
 397:Src/main.c    ****         * Input 
 398:Src/main.c    ****         * Output
 399:Src/main.c    ****         * EVENT_OUT
 400:Src/main.c    ****         * EXTI
 401:Src/main.c    **** */
 402:Src/main.c    **** static void MX_GPIO_Init(void)
 403:Src/main.c    **** {
  26              		.loc 1 403 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
  41              	.LBB2:
 404:Src/main.c    **** 
 405:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* GPIO Ports Clock Enable */
 408:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  42              		.loc 1 408 0
  43 0004 274B     		ldr	r3, .L3
  44 0006 9A69     		ldr	r2, [r3, #24]
  45 0008 42F02002 		orr	r2, r2, #32
  46 000c 9A61     		str	r2, [r3, #24]
  47 000e 9A69     		ldr	r2, [r3, #24]
  48 0010 02F02002 		and	r2, r2, #32
  49 0014 0092     		str	r2, [sp]
ARM GAS  /tmp/ccjEuVCe.s 			page 9


  50 0016 009A     		ldr	r2, [sp]
  51              	.LBE2:
  52              	.LBB3:
 409:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 409 0
  54 0018 9A69     		ldr	r2, [r3, #24]
  55 001a 42F01002 		orr	r2, r2, #16
  56 001e 9A61     		str	r2, [r3, #24]
  57 0020 9A69     		ldr	r2, [r3, #24]
  58 0022 02F01002 		and	r2, r2, #16
  59 0026 0192     		str	r2, [sp, #4]
  60 0028 019A     		ldr	r2, [sp, #4]
  61              	.LBE3:
  62              	.LBB4:
 410:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  63              		.loc 1 410 0
  64 002a 9A69     		ldr	r2, [r3, #24]
  65 002c 42F00802 		orr	r2, r2, #8
  66 0030 9A61     		str	r2, [r3, #24]
  67 0032 9A69     		ldr	r2, [r3, #24]
  68 0034 02F00802 		and	r2, r2, #8
  69 0038 0292     		str	r2, [sp, #8]
  70 003a 029A     		ldr	r2, [sp, #8]
  71              	.LBE4:
  72              	.LBB5:
 411:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  73              		.loc 1 411 0
  74 003c 9A69     		ldr	r2, [r3, #24]
  75 003e 42F00402 		orr	r2, r2, #4
  76 0042 9A61     		str	r2, [r3, #24]
  77 0044 9B69     		ldr	r3, [r3, #24]
  78 0046 03F00403 		and	r3, r3, #4
  79 004a 0393     		str	r3, [sp, #12]
  80 004c 039B     		ldr	r3, [sp, #12]
  81              	.LBE5:
 412:Src/main.c    **** 
 413:Src/main.c    ****   /*Configure GPIO pin Output Level */
 414:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, POLOLU_SLEEP_Pin|POLOLU_DIR_Pin, GPIO_PIN_RESET);
  82              		.loc 1 414 0
  83 004e 164D     		ldr	r5, .L3+4
  84 0050 2846     		mov	r0, r5
  85 0052 2121     		movs	r1, #33
  86 0054 0022     		movs	r2, #0
  87 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL0:
 415:Src/main.c    **** 
 416:Src/main.c    ****   /*Configure GPIO pin Output Level */
 417:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
  89              		.loc 1 417 0
  90 005a 144E     		ldr	r6, .L3+8
  91 005c 3046     		mov	r0, r6
  92 005e 4FF4E071 		mov	r1, #448
  93 0062 0022     		movs	r2, #0
  94 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  95              	.LVL1:
 418:Src/main.c    **** 
 419:Src/main.c    ****   /*Configure GPIO pins : POLOLU_SLEEP_Pin POLOLU_DIR_Pin */
ARM GAS  /tmp/ccjEuVCe.s 			page 10


 420:Src/main.c    ****   GPIO_InitStruct.Pin = POLOLU_SLEEP_Pin|POLOLU_DIR_Pin;
  96              		.loc 1 420 0
  97 0068 2123     		movs	r3, #33
  98 006a 0493     		str	r3, [sp, #16]
 421:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  99              		.loc 1 421 0
 100 006c 0127     		movs	r7, #1
 101 006e 0597     		str	r7, [sp, #20]
 422:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 422 0
 103 0070 0224     		movs	r4, #2
 104 0072 0794     		str	r4, [sp, #28]
 423:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 105              		.loc 1 423 0
 106 0074 2846     		mov	r0, r5
 107 0076 04A9     		add	r1, sp, #16
 108 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL2:
 424:Src/main.c    **** 
 425:Src/main.c    ****   /*Configure GPIO pin : POLOLU_FAULT_Pin */
 426:Src/main.c    ****   GPIO_InitStruct.Pin = POLOLU_FAULT_Pin;
 110              		.loc 1 426 0
 111 007c 0494     		str	r4, [sp, #16]
 427:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 112              		.loc 1 427 0
 113 007e 0023     		movs	r3, #0
 114 0080 0593     		str	r3, [sp, #20]
 428:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 428 0
 116 0082 0693     		str	r3, [sp, #24]
 429:Src/main.c    ****   HAL_GPIO_Init(POLOLU_FAULT_GPIO_Port, &GPIO_InitStruct);
 117              		.loc 1 429 0
 118 0084 2846     		mov	r0, r5
 119 0086 04A9     		add	r1, sp, #16
 120 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL3:
 430:Src/main.c    **** 
 431:Src/main.c    ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
 432:Src/main.c    ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 122              		.loc 1 432 0
 123 008c 4FF4E073 		mov	r3, #448
 124 0090 0493     		str	r3, [sp, #16]
 433:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 125              		.loc 1 433 0
 126 0092 0597     		str	r7, [sp, #20]
 434:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 127              		.loc 1 434 0
 128 0094 0794     		str	r4, [sp, #28]
 435:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 129              		.loc 1 435 0
 130 0096 3046     		mov	r0, r6
 131 0098 04A9     		add	r1, sp, #16
 132 009a FFF7FEFF 		bl	HAL_GPIO_Init
 133              	.LVL4:
 436:Src/main.c    **** 
 437:Src/main.c    **** }
 134              		.loc 1 437 0
ARM GAS  /tmp/ccjEuVCe.s 			page 11


 135 009e 09B0     		add	sp, sp, #36
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 20
 138              		@ sp needed
 139 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 140              	.L4:
 141 00a2 00BF     		.align	2
 142              	.L3:
 143 00a4 00100240 		.word	1073876992
 144 00a8 000C0140 		.word	1073810432
 145 00ac 00100140 		.word	1073811456
 146              		.cfi_endproc
 147              	.LFE72:
 149              		.section	.text._Error_Handler,"ax",%progbits
 150              		.align	2
 151              		.global	_Error_Handler
 152              		.thumb
 153              		.thumb_func
 155              	_Error_Handler:
 156              	.LFB73:
 438:Src/main.c    **** 
 439:Src/main.c    **** /* USER CODE BEGIN 4 */
 440:Src/main.c    **** 
 441:Src/main.c    **** /* USER CODE END 4 */
 442:Src/main.c    **** 
 443:Src/main.c    **** /**
 444:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 445:Src/main.c    ****   * @param  file: The file name as string.
 446:Src/main.c    ****   * @param  line: The line in file as a number.
 447:Src/main.c    ****   * @retval None
 448:Src/main.c    ****   */
 449:Src/main.c    **** void _Error_Handler(char *file, int line)
 450:Src/main.c    **** {
 157              		.loc 1 450 0
 158              		.cfi_startproc
 159              		@ Volatile: function does not return.
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL5:
 164              	.L6:
 451:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 452:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 453:Src/main.c    ****   while(1)
 454:Src/main.c    ****   {
 455:Src/main.c    ****   }
 165              		.loc 1 455 0 discriminator 1
 166 0000 FEE7     		b	.L6
 167              		.cfi_endproc
 168              	.LFE73:
 170 0002 00BF     		.section	.text.MX_CAN1_Init,"ax",%progbits
 171              		.align	2
 172              		.thumb
 173              		.thumb_func
 175              	MX_CAN1_Init:
 176              	.LFB67:
 275:Src/main.c    **** 
ARM GAS  /tmp/ccjEuVCe.s 			page 12


 177              		.loc 1 275 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181 0000 08B5     		push	{r3, lr}
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 3, -8
 185              		.cfi_offset 14, -4
 277:Src/main.c    ****   hcan1.Init.Prescaler = 9;
 186              		.loc 1 277 0
 187 0002 0E48     		ldr	r0, .L10
 188 0004 0E4B     		ldr	r3, .L10+4
 189 0006 0360     		str	r3, [r0]
 278:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 190              		.loc 1 278 0
 191 0008 0923     		movs	r3, #9
 192 000a 4360     		str	r3, [r0, #4]
 279:Src/main.c    ****   hcan1.Init.SJW = CAN_SJW_1TQ;
 193              		.loc 1 279 0
 194 000c 0023     		movs	r3, #0
 195 000e 8360     		str	r3, [r0, #8]
 280:Src/main.c    ****   hcan1.Init.BS1 = CAN_BS1_13TQ;
 196              		.loc 1 280 0
 197 0010 C360     		str	r3, [r0, #12]
 281:Src/main.c    ****   hcan1.Init.BS2 = CAN_BS2_2TQ;
 198              		.loc 1 281 0
 199 0012 4FF44022 		mov	r2, #786432
 200 0016 0261     		str	r2, [r0, #16]
 282:Src/main.c    ****   hcan1.Init.TTCM = DISABLE;
 201              		.loc 1 282 0
 202 0018 4FF48012 		mov	r2, #1048576
 203 001c 4261     		str	r2, [r0, #20]
 283:Src/main.c    ****   hcan1.Init.ABOM = DISABLE;
 204              		.loc 1 283 0
 205 001e 8361     		str	r3, [r0, #24]
 284:Src/main.c    ****   hcan1.Init.AWUM = DISABLE;
 206              		.loc 1 284 0
 207 0020 C361     		str	r3, [r0, #28]
 285:Src/main.c    ****   hcan1.Init.NART = DISABLE;
 208              		.loc 1 285 0
 209 0022 0362     		str	r3, [r0, #32]
 286:Src/main.c    ****   hcan1.Init.RFLM = DISABLE;
 210              		.loc 1 286 0
 211 0024 4362     		str	r3, [r0, #36]
 287:Src/main.c    ****   hcan1.Init.TXFP = DISABLE;
 212              		.loc 1 287 0
 213 0026 8362     		str	r3, [r0, #40]
 288:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 214              		.loc 1 288 0
 215 0028 C362     		str	r3, [r0, #44]
 289:Src/main.c    ****   {
 216              		.loc 1 289 0
 217 002a FFF7FEFF 		bl	HAL_CAN_Init
 218              	.LVL6:
 219 002e 20B1     		cbz	r0, .L7
 291:Src/main.c    ****   }
ARM GAS  /tmp/ccjEuVCe.s 			page 13


 220              		.loc 1 291 0
 221 0030 0448     		ldr	r0, .L10+8
 222 0032 40F22311 		movw	r1, #291
 223 0036 FFF7FEFF 		bl	_Error_Handler
 224              	.LVL7:
 225              	.L7:
 226 003a 08BD     		pop	{r3, pc}
 227              	.L11:
 228              		.align	2
 229              	.L10:
 230 003c 00000000 		.word	hcan1
 231 0040 00640040 		.word	1073767424
 232 0044 00000000 		.word	.LC0
 233              		.cfi_endproc
 234              	.LFE67:
 236              		.section	.text.MX_CAN2_Init,"ax",%progbits
 237              		.align	2
 238              		.thumb
 239              		.thumb_func
 241              	MX_CAN2_Init:
 242              	.LFB68:
 298:Src/main.c    **** 
 243              		.loc 1 298 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 08B5     		push	{r3, lr}
 248              	.LCFI4:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 3, -8
 251              		.cfi_offset 14, -4
 300:Src/main.c    ****   hcan2.Init.Prescaler = 9;
 252              		.loc 1 300 0
 253 0002 0E48     		ldr	r0, .L15
 254 0004 0E4B     		ldr	r3, .L15+4
 255 0006 0360     		str	r3, [r0]
 301:Src/main.c    ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 256              		.loc 1 301 0
 257 0008 0923     		movs	r3, #9
 258 000a 4360     		str	r3, [r0, #4]
 302:Src/main.c    ****   hcan2.Init.SJW = CAN_SJW_1TQ;
 259              		.loc 1 302 0
 260 000c 0023     		movs	r3, #0
 261 000e 8360     		str	r3, [r0, #8]
 303:Src/main.c    ****   hcan2.Init.BS1 = CAN_BS1_13TQ;
 262              		.loc 1 303 0
 263 0010 C360     		str	r3, [r0, #12]
 304:Src/main.c    ****   hcan2.Init.BS2 = CAN_BS2_2TQ;
 264              		.loc 1 304 0
 265 0012 4FF44022 		mov	r2, #786432
 266 0016 0261     		str	r2, [r0, #16]
 305:Src/main.c    ****   hcan2.Init.TTCM = DISABLE;
 267              		.loc 1 305 0
 268 0018 4FF48012 		mov	r2, #1048576
 269 001c 4261     		str	r2, [r0, #20]
 306:Src/main.c    ****   hcan2.Init.ABOM = DISABLE;
 270              		.loc 1 306 0
ARM GAS  /tmp/ccjEuVCe.s 			page 14


 271 001e 8361     		str	r3, [r0, #24]
 307:Src/main.c    ****   hcan2.Init.AWUM = DISABLE;
 272              		.loc 1 307 0
 273 0020 C361     		str	r3, [r0, #28]
 308:Src/main.c    ****   hcan2.Init.NART = DISABLE;
 274              		.loc 1 308 0
 275 0022 0362     		str	r3, [r0, #32]
 309:Src/main.c    ****   hcan2.Init.RFLM = DISABLE;
 276              		.loc 1 309 0
 277 0024 4362     		str	r3, [r0, #36]
 310:Src/main.c    ****   hcan2.Init.TXFP = DISABLE;
 278              		.loc 1 310 0
 279 0026 8362     		str	r3, [r0, #40]
 311:Src/main.c    ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 280              		.loc 1 311 0
 281 0028 C362     		str	r3, [r0, #44]
 312:Src/main.c    ****   {
 282              		.loc 1 312 0
 283 002a FFF7FEFF 		bl	HAL_CAN_Init
 284              	.LVL8:
 285 002e 20B1     		cbz	r0, .L12
 314:Src/main.c    ****   }
 286              		.loc 1 314 0
 287 0030 0448     		ldr	r0, .L15+8
 288 0032 4FF49D71 		mov	r1, #314
 289 0036 FFF7FEFF 		bl	_Error_Handler
 290              	.LVL9:
 291              	.L12:
 292 003a 08BD     		pop	{r3, pc}
 293              	.L16:
 294              		.align	2
 295              	.L15:
 296 003c 00000000 		.word	hcan2
 297 0040 00680040 		.word	1073768448
 298 0044 00000000 		.word	.LC0
 299              		.cfi_endproc
 300              	.LFE68:
 302              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 303              		.align	2
 304              		.thumb
 305              		.thumb_func
 307              	MX_USART1_UART_Init:
 308              	.LFB71:
 378:Src/main.c    **** 
 309              		.loc 1 378 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 08B5     		push	{r3, lr}
 314              	.LCFI5:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 380:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 318              		.loc 1 380 0
 319 0002 0B48     		ldr	r0, .L20
 320 0004 0B4B     		ldr	r3, .L20+4
ARM GAS  /tmp/ccjEuVCe.s 			page 15


 321 0006 0360     		str	r3, [r0]
 381:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 322              		.loc 1 381 0
 323 0008 4FF4E133 		mov	r3, #115200
 324 000c 4360     		str	r3, [r0, #4]
 382:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 325              		.loc 1 382 0
 326 000e 0023     		movs	r3, #0
 327 0010 8360     		str	r3, [r0, #8]
 383:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 328              		.loc 1 383 0
 329 0012 C360     		str	r3, [r0, #12]
 384:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 330              		.loc 1 384 0
 331 0014 0361     		str	r3, [r0, #16]
 385:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 332              		.loc 1 385 0
 333 0016 0C22     		movs	r2, #12
 334 0018 4261     		str	r2, [r0, #20]
 386:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 335              		.loc 1 386 0
 336 001a 8361     		str	r3, [r0, #24]
 387:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 337              		.loc 1 387 0
 338 001c C361     		str	r3, [r0, #28]
 388:Src/main.c    ****   {
 339              		.loc 1 388 0
 340 001e FFF7FEFF 		bl	HAL_UART_Init
 341              	.LVL10:
 342 0022 20B1     		cbz	r0, .L17
 390:Src/main.c    ****   }
 343              		.loc 1 390 0
 344 0024 0448     		ldr	r0, .L20+8
 345 0026 4FF4C371 		mov	r1, #390
 346 002a FFF7FEFF 		bl	_Error_Handler
 347              	.LVL11:
 348              	.L17:
 349 002e 08BD     		pop	{r3, pc}
 350              	.L21:
 351              		.align	2
 352              	.L20:
 353 0030 00000000 		.word	huart1
 354 0034 00380140 		.word	1073821696
 355 0038 00000000 		.word	.LC0
 356              		.cfi_endproc
 357              	.LFE71:
 359              		.section	.text.MX_UART4_Init,"ax",%progbits
 360              		.align	2
 361              		.thumb
 362              		.thumb_func
 364              	MX_UART4_Init:
 365              	.LFB70:
 359:Src/main.c    **** 
 366              		.loc 1 359 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjEuVCe.s 			page 16


 370 0000 08B5     		push	{r3, lr}
 371              	.LCFI6:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 3, -8
 374              		.cfi_offset 14, -4
 361:Src/main.c    ****   huart4.Init.BaudRate = 115200;
 375              		.loc 1 361 0
 376 0002 0B48     		ldr	r0, .L25
 377 0004 0B4B     		ldr	r3, .L25+4
 378 0006 0360     		str	r3, [r0]
 362:Src/main.c    ****   huart4.Init.WordLength = UART_WORDLENGTH_8B;
 379              		.loc 1 362 0
 380 0008 4FF4E133 		mov	r3, #115200
 381 000c 4360     		str	r3, [r0, #4]
 363:Src/main.c    ****   huart4.Init.StopBits = UART_STOPBITS_1;
 382              		.loc 1 363 0
 383 000e 0023     		movs	r3, #0
 384 0010 8360     		str	r3, [r0, #8]
 364:Src/main.c    ****   huart4.Init.Parity = UART_PARITY_NONE;
 385              		.loc 1 364 0
 386 0012 C360     		str	r3, [r0, #12]
 365:Src/main.c    ****   huart4.Init.Mode = UART_MODE_TX_RX;
 387              		.loc 1 365 0
 388 0014 0361     		str	r3, [r0, #16]
 366:Src/main.c    ****   huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 389              		.loc 1 366 0
 390 0016 0C22     		movs	r2, #12
 391 0018 4261     		str	r2, [r0, #20]
 367:Src/main.c    ****   huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 392              		.loc 1 367 0
 393 001a 8361     		str	r3, [r0, #24]
 368:Src/main.c    ****   if (HAL_UART_Init(&huart4) != HAL_OK)
 394              		.loc 1 368 0
 395 001c C361     		str	r3, [r0, #28]
 369:Src/main.c    ****   {
 396              		.loc 1 369 0
 397 001e FFF7FEFF 		bl	HAL_UART_Init
 398              	.LVL12:
 399 0022 20B1     		cbz	r0, .L22
 371:Src/main.c    ****   }
 400              		.loc 1 371 0
 401 0024 0448     		ldr	r0, .L25+8
 402 0026 40F27311 		movw	r1, #371
 403 002a FFF7FEFF 		bl	_Error_Handler
 404              	.LVL13:
 405              	.L22:
 406 002e 08BD     		pop	{r3, pc}
 407              	.L26:
 408              		.align	2
 409              	.L25:
 410 0030 00000000 		.word	huart4
 411 0034 004C0040 		.word	1073761280
 412 0038 00000000 		.word	.LC0
 413              		.cfi_endproc
 414              	.LFE70:
 416              		.section	.text.MX_TIM3_Init,"ax",%progbits
 417              		.align	2
ARM GAS  /tmp/ccjEuVCe.s 			page 17


 418              		.thumb
 419              		.thumb_func
 421              	MX_TIM3_Init:
 422              	.LFB69:
 321:Src/main.c    **** 
 423              		.loc 1 321 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 40
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427 0000 00B5     		push	{lr}
 428              	.LCFI7:
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 14, -4
 431 0002 8BB0     		sub	sp, sp, #44
 432              	.LCFI8:
 433              		.cfi_def_cfa_offset 48
 326:Src/main.c    ****   htim3.Init.Prescaler = 0;
 434              		.loc 1 326 0
 435 0004 1A48     		ldr	r0, .L32
 436 0006 1B4B     		ldr	r3, .L32+4
 437 0008 0360     		str	r3, [r0]
 327:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 438              		.loc 1 327 0
 439 000a 0023     		movs	r3, #0
 440 000c 4360     		str	r3, [r0, #4]
 328:Src/main.c    ****   htim3.Init.Period = 999;
 441              		.loc 1 328 0
 442 000e 8360     		str	r3, [r0, #8]
 329:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 443              		.loc 1 329 0
 444 0010 40F2E732 		movw	r2, #999
 445 0014 C260     		str	r2, [r0, #12]
 330:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 446              		.loc 1 330 0
 447 0016 0361     		str	r3, [r0, #16]
 331:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 448              		.loc 1 331 0
 449 0018 8361     		str	r3, [r0, #24]
 332:Src/main.c    ****   {
 450              		.loc 1 332 0
 451 001a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 452              	.LVL14:
 453 001e 20B1     		cbz	r0, .L28
 334:Src/main.c    ****   }
 454              		.loc 1 334 0
 455 0020 1548     		ldr	r0, .L32+8
 456 0022 4FF4A771 		mov	r1, #334
 457 0026 FFF7FEFF 		bl	_Error_Handler
 458              	.LVL15:
 459              	.L28:
 337:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 460              		.loc 1 337 0
 461 002a 0023     		movs	r3, #0
 462 002c 0893     		str	r3, [sp, #32]
 338:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 463              		.loc 1 338 0
 464 002e 0993     		str	r3, [sp, #36]
ARM GAS  /tmp/ccjEuVCe.s 			page 18


 339:Src/main.c    ****   {
 465              		.loc 1 339 0
 466 0030 0F48     		ldr	r0, .L32
 467 0032 08A9     		add	r1, sp, #32
 468 0034 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 469              	.LVL16:
 470 0038 20B1     		cbz	r0, .L29
 341:Src/main.c    ****   }
 471              		.loc 1 341 0
 472 003a 0F48     		ldr	r0, .L32+8
 473 003c 40F25511 		movw	r1, #341
 474 0040 FFF7FEFF 		bl	_Error_Handler
 475              	.LVL17:
 476              	.L29:
 344:Src/main.c    ****   sConfigOC.Pulse = 0;
 477              		.loc 1 344 0
 478 0044 6023     		movs	r3, #96
 479 0046 0193     		str	r3, [sp, #4]
 345:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 480              		.loc 1 345 0
 481 0048 0022     		movs	r2, #0
 482 004a 0292     		str	r2, [sp, #8]
 346:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 483              		.loc 1 346 0
 484 004c 0392     		str	r2, [sp, #12]
 347:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 485              		.loc 1 347 0
 486 004e 0592     		str	r2, [sp, #20]
 348:Src/main.c    ****   {
 487              		.loc 1 348 0
 488 0050 0748     		ldr	r0, .L32
 489 0052 01A9     		add	r1, sp, #4
 490 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 491              	.LVL18:
 492 0058 20B1     		cbz	r0, .L30
 350:Src/main.c    ****   }
 493              		.loc 1 350 0
 494 005a 0748     		ldr	r0, .L32+8
 495 005c 4FF4AF71 		mov	r1, #350
 496 0060 FFF7FEFF 		bl	_Error_Handler
 497              	.LVL19:
 498              	.L30:
 353:Src/main.c    **** 
 499              		.loc 1 353 0
 500 0064 0248     		ldr	r0, .L32
 501 0066 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 502              	.LVL20:
 355:Src/main.c    **** 
 503              		.loc 1 355 0
 504 006a 0BB0     		add	sp, sp, #44
 505              	.LCFI9:
 506              		.cfi_def_cfa_offset 4
 507              		@ sp needed
 508 006c 5DF804FB 		ldr	pc, [sp], #4
 509              	.L33:
 510              		.align	2
 511              	.L32:
ARM GAS  /tmp/ccjEuVCe.s 			page 19


 512 0070 00000000 		.word	htim3
 513 0074 00040040 		.word	1073742848
 514 0078 00000000 		.word	.LC0
 515              		.cfi_endproc
 516              	.LFE69:
 518              		.section	.text.MX_ADC1_Init,"ax",%progbits
 519              		.align	2
 520              		.thumb
 521              		.thumb_func
 523              	MX_ADC1_Init:
 524              	.LFB65:
 211:Src/main.c    **** 
 525              		.loc 1 211 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 16
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529 0000 00B5     		push	{lr}
 530              	.LCFI10:
 531              		.cfi_def_cfa_offset 4
 532              		.cfi_offset 14, -4
 533 0002 85B0     		sub	sp, sp, #20
 534              	.LCFI11:
 535              		.cfi_def_cfa_offset 24
 217:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 536              		.loc 1 217 0
 537 0004 1248     		ldr	r0, .L38
 538 0006 134B     		ldr	r3, .L38+4
 539 0008 0360     		str	r3, [r0]
 218:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 540              		.loc 1 218 0
 541 000a 0023     		movs	r3, #0
 542 000c 8360     		str	r3, [r0, #8]
 219:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 543              		.loc 1 219 0
 544 000e C360     		str	r3, [r0, #12]
 220:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 545              		.loc 1 220 0
 546 0010 4361     		str	r3, [r0, #20]
 221:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 547              		.loc 1 221 0
 548 0012 4FF46022 		mov	r2, #917504
 549 0016 C261     		str	r2, [r0, #28]
 222:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 550              		.loc 1 222 0
 551 0018 4360     		str	r3, [r0, #4]
 223:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 552              		.loc 1 223 0
 553 001a 0123     		movs	r3, #1
 554 001c 0361     		str	r3, [r0, #16]
 224:Src/main.c    ****   {
 555              		.loc 1 224 0
 556 001e FFF7FEFF 		bl	HAL_ADC_Init
 557              	.LVL21:
 558 0022 18B1     		cbz	r0, .L35
 226:Src/main.c    ****   }
 559              		.loc 1 226 0
 560 0024 0C48     		ldr	r0, .L38+8
ARM GAS  /tmp/ccjEuVCe.s 			page 20


 561 0026 E221     		movs	r1, #226
 562 0028 FFF7FEFF 		bl	_Error_Handler
 563              	.LVL22:
 564              	.L35:
 231:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 565              		.loc 1 231 0
 566 002c 0A23     		movs	r3, #10
 567 002e 0193     		str	r3, [sp, #4]
 232:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 568              		.loc 1 232 0
 569 0030 0123     		movs	r3, #1
 570 0032 0293     		str	r3, [sp, #8]
 233:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 571              		.loc 1 233 0
 572 0034 0223     		movs	r3, #2
 573 0036 0393     		str	r3, [sp, #12]
 234:Src/main.c    ****   {
 574              		.loc 1 234 0
 575 0038 0548     		ldr	r0, .L38
 576 003a 01A9     		add	r1, sp, #4
 577 003c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 578              	.LVL23:
 579 0040 18B1     		cbz	r0, .L34
 236:Src/main.c    ****   }
 580              		.loc 1 236 0
 581 0042 0548     		ldr	r0, .L38+8
 582 0044 EC21     		movs	r1, #236
 583 0046 FFF7FEFF 		bl	_Error_Handler
 584              	.LVL24:
 585              	.L34:
 239:Src/main.c    **** 
 586              		.loc 1 239 0
 587 004a 05B0     		add	sp, sp, #20
 588              	.LCFI12:
 589              		.cfi_def_cfa_offset 4
 590              		@ sp needed
 591 004c 5DF804FB 		ldr	pc, [sp], #4
 592              	.L39:
 593              		.align	2
 594              	.L38:
 595 0050 00000000 		.word	hadc1
 596 0054 00240140 		.word	1073816576
 597 0058 00000000 		.word	.LC0
 598              		.cfi_endproc
 599              	.LFE65:
 601              		.section	.text.MX_ADC2_Init,"ax",%progbits
 602              		.align	2
 603              		.thumb
 604              		.thumb_func
 606              	MX_ADC2_Init:
 607              	.LFB66:
 243:Src/main.c    **** 
 608              		.loc 1 243 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 16
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccjEuVCe.s 			page 21


 613              	.LCFI13:
 614              		.cfi_def_cfa_offset 4
 615              		.cfi_offset 14, -4
 616 0002 85B0     		sub	sp, sp, #20
 617              	.LCFI14:
 618              		.cfi_def_cfa_offset 24
 249:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 619              		.loc 1 249 0
 620 0004 1348     		ldr	r0, .L44
 621 0006 144B     		ldr	r3, .L44+4
 622 0008 0360     		str	r3, [r0]
 250:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 623              		.loc 1 250 0
 624 000a 0023     		movs	r3, #0
 625 000c 8360     		str	r3, [r0, #8]
 251:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 626              		.loc 1 251 0
 627 000e C360     		str	r3, [r0, #12]
 252:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 628              		.loc 1 252 0
 629 0010 4361     		str	r3, [r0, #20]
 253:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 630              		.loc 1 253 0
 631 0012 4FF46022 		mov	r2, #917504
 632 0016 C261     		str	r2, [r0, #28]
 254:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 633              		.loc 1 254 0
 634 0018 4360     		str	r3, [r0, #4]
 255:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 635              		.loc 1 255 0
 636 001a 0123     		movs	r3, #1
 637 001c 0361     		str	r3, [r0, #16]
 256:Src/main.c    ****   {
 638              		.loc 1 256 0
 639 001e FFF7FEFF 		bl	HAL_ADC_Init
 640              	.LVL25:
 641 0022 20B1     		cbz	r0, .L41
 258:Src/main.c    ****   }
 642              		.loc 1 258 0
 643 0024 0D48     		ldr	r0, .L44+8
 644 0026 4FF48171 		mov	r1, #258
 645 002a FFF7FEFF 		bl	_Error_Handler
 646              	.LVL26:
 647              	.L41:
 263:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 648              		.loc 1 263 0
 649 002e 0B23     		movs	r3, #11
 650 0030 0193     		str	r3, [sp, #4]
 264:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 651              		.loc 1 264 0
 652 0032 0123     		movs	r3, #1
 653 0034 0293     		str	r3, [sp, #8]
 265:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 654              		.loc 1 265 0
 655 0036 0223     		movs	r3, #2
 656 0038 0393     		str	r3, [sp, #12]
 266:Src/main.c    ****   {
ARM GAS  /tmp/ccjEuVCe.s 			page 22


 657              		.loc 1 266 0
 658 003a 0648     		ldr	r0, .L44
 659 003c 01A9     		add	r1, sp, #4
 660 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 661              	.LVL27:
 662 0042 20B1     		cbz	r0, .L40
 268:Src/main.c    ****   }
 663              		.loc 1 268 0
 664 0044 0548     		ldr	r0, .L44+8
 665 0046 4FF48671 		mov	r1, #268
 666 004a FFF7FEFF 		bl	_Error_Handler
 667              	.LVL28:
 668              	.L40:
 271:Src/main.c    **** 
 669              		.loc 1 271 0
 670 004e 05B0     		add	sp, sp, #20
 671              	.LCFI15:
 672              		.cfi_def_cfa_offset 4
 673              		@ sp needed
 674 0050 5DF804FB 		ldr	pc, [sp], #4
 675              	.L45:
 676              		.align	2
 677              	.L44:
 678 0054 00000000 		.word	hadc2
 679 0058 00280140 		.word	1073817600
 680 005c 00000000 		.word	.LC0
 681              		.cfi_endproc
 682              	.LFE66:
 684              		.section	.text.SystemClock_Config,"ax",%progbits
 685              		.align	2
 686              		.global	SystemClock_Config
 687              		.thumb
 688              		.thumb_func
 690              	SystemClock_Config:
 691              	.LFB64:
 150:Src/main.c    **** 
 692              		.loc 1 150 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 112
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696 0000 00B5     		push	{lr}
 697              	.LCFI16:
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 14, -4
 700 0002 9DB0     		sub	sp, sp, #116
 701              	.LCFI17:
 702              		.cfi_def_cfa_offset 120
 158:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 703              		.loc 1 158 0
 704 0004 0121     		movs	r1, #1
 705 0006 0E91     		str	r1, [sp, #56]
 159:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 706              		.loc 1 159 0
 707 0008 4FF48032 		mov	r2, #65536
 708 000c 1092     		str	r2, [sp, #64]
 160:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 709              		.loc 1 160 0
ARM GAS  /tmp/ccjEuVCe.s 			page 23


 710 000e 0023     		movs	r3, #0
 711 0010 1193     		str	r3, [sp, #68]
 161:Src/main.c    ****   RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 712              		.loc 1 161 0
 713 0012 1391     		str	r1, [sp, #76]
 162:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 714              		.loc 1 162 0
 715 0014 0F93     		str	r3, [sp, #60]
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 716              		.loc 1 163 0
 717 0016 0221     		movs	r1, #2
 718 0018 1691     		str	r1, [sp, #88]
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 719              		.loc 1 164 0
 720 001a 1792     		str	r2, [sp, #92]
 165:Src/main.c    ****   RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 721              		.loc 1 165 0
 722 001c 4FF4E012 		mov	r2, #1835008
 723 0020 1892     		str	r2, [sp, #96]
 166:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 724              		.loc 1 166 0
 725 0022 1993     		str	r3, [sp, #100]
 167:Src/main.c    ****   {
 726              		.loc 1 167 0
 727 0024 0EA8     		add	r0, sp, #56
 728 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 729              	.LVL29:
 730 002a 18B1     		cbz	r0, .L47
 169:Src/main.c    ****   }
 731              		.loc 1 169 0
 732 002c 1C48     		ldr	r0, .L51
 733 002e A921     		movs	r1, #169
 734 0030 FFF7FEFF 		bl	_Error_Handler
 735              	.LVL30:
 736              	.L47:
 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 737              		.loc 1 174 0
 738 0034 0F23     		movs	r3, #15
 739 0036 0993     		str	r3, [sp, #36]
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 740              		.loc 1 176 0
 741 0038 0221     		movs	r1, #2
 742 003a 0A91     		str	r1, [sp, #40]
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 743              		.loc 1 177 0
 744 003c 0023     		movs	r3, #0
 745 003e 0B93     		str	r3, [sp, #44]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 746              		.loc 1 178 0
 747 0040 4FF48062 		mov	r2, #1024
 748 0044 0C92     		str	r2, [sp, #48]
 179:Src/main.c    **** 
 749              		.loc 1 179 0
 750 0046 0D93     		str	r3, [sp, #52]
 181:Src/main.c    ****   {
 751              		.loc 1 181 0
 752 0048 09A8     		add	r0, sp, #36
ARM GAS  /tmp/ccjEuVCe.s 			page 24


 753 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 754              	.LVL31:
 755 004e 18B1     		cbz	r0, .L48
 183:Src/main.c    ****   }
 756              		.loc 1 183 0
 757 0050 1348     		ldr	r0, .L51
 758 0052 B721     		movs	r1, #183
 759 0054 FFF7FEFF 		bl	_Error_Handler
 760              	.LVL32:
 761              	.L48:
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 762              		.loc 1 186 0
 763 0058 0223     		movs	r3, #2
 764 005a 0193     		str	r3, [sp, #4]
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 765              		.loc 1 187 0
 766 005c 4FF40043 		mov	r3, #32768
 767 0060 0393     		str	r3, [sp, #12]
 188:Src/main.c    ****   {
 768              		.loc 1 188 0
 769 0062 01A8     		add	r0, sp, #4
 770 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 771              	.LVL33:
 772 0068 18B1     		cbz	r0, .L49
 190:Src/main.c    ****   }
 773              		.loc 1 190 0
 774 006a 0D48     		ldr	r0, .L51
 775 006c BE21     		movs	r1, #190
 776 006e FFF7FEFF 		bl	_Error_Handler
 777              	.LVL34:
 778              	.L49:
 195:Src/main.c    **** 
 779              		.loc 1 195 0
 780 0072 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 781              	.LVL35:
 782 0076 0B4B     		ldr	r3, .L51+4
 783 0078 A3FB0030 		umull	r3, r0, r3, r0
 784 007c 8009     		lsrs	r0, r0, #6
 785 007e FFF7FEFF 		bl	HAL_SYSTICK_Config
 786              	.LVL36:
 199:Src/main.c    **** 
 787              		.loc 1 199 0
 788 0082 0420     		movs	r0, #4
 789 0084 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 790              	.LVL37:
 203:Src/main.c    **** 
 791              		.loc 1 203 0
 792 0088 0122     		movs	r2, #1
 793 008a 074B     		ldr	r3, .L51+8
 794 008c 1A60     		str	r2, [r3]
 206:Src/main.c    **** }
 795              		.loc 1 206 0
 796 008e 4FF0FF30 		mov	r0, #-1
 797 0092 0021     		movs	r1, #0
 798 0094 0A46     		mov	r2, r1
 799 0096 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 800              	.LVL38:
ARM GAS  /tmp/ccjEuVCe.s 			page 25


 207:Src/main.c    **** 
 801              		.loc 1 207 0
 802 009a 1DB0     		add	sp, sp, #116
 803              	.LCFI18:
 804              		.cfi_def_cfa_offset 4
 805              		@ sp needed
 806 009c 5DF804FB 		ldr	pc, [sp], #4
 807              	.L52:
 808              		.align	2
 809              	.L51:
 810 00a0 00000000 		.word	.LC0
 811 00a4 D34D6210 		.word	274877907
 812 00a8 70004242 		.word	1111621744
 813              		.cfi_endproc
 814              	.LFE64:
 816              		.section	.text.main,"ax",%progbits
 817              		.align	2
 818              		.global	main
 819              		.thumb
 820              		.thumb_func
 822              	main:
 823              	.LFB63:
  93:Src/main.c    ****   /* USER CODE BEGIN 1 */
 824              		.loc 1 93 0
 825              		.cfi_startproc
 826              		@ Volatile: function does not return.
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829 0000 08B5     		push	{r3, lr}
 830              	.LCFI19:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 3, -8
 833              		.cfi_offset 14, -4
 101:Src/main.c    **** 
 834              		.loc 1 101 0
 835 0002 FFF7FEFF 		bl	HAL_Init
 836              	.LVL39:
 108:Src/main.c    **** 
 837              		.loc 1 108 0
 838 0006 FFF7FEFF 		bl	SystemClock_Config
 839              	.LVL40:
 115:Src/main.c    ****   MX_CAN1_Init();
 840              		.loc 1 115 0
 841 000a FFF7FEFF 		bl	MX_GPIO_Init
 842              	.LVL41:
 116:Src/main.c    ****   MX_CAN2_Init();
 843              		.loc 1 116 0
 844 000e FFF7FEFF 		bl	MX_CAN1_Init
 845              	.LVL42:
 117:Src/main.c    ****   MX_USART1_UART_Init();
 846              		.loc 1 117 0
 847 0012 FFF7FEFF 		bl	MX_CAN2_Init
 848              	.LVL43:
 118:Src/main.c    ****   MX_UART4_Init();
 849              		.loc 1 118 0
 850 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 851              	.LVL44:
ARM GAS  /tmp/ccjEuVCe.s 			page 26


 119:Src/main.c    ****   MX_TIM3_Init();
 852              		.loc 1 119 0
 853 001a FFF7FEFF 		bl	MX_UART4_Init
 854              	.LVL45:
 120:Src/main.c    ****   MX_ADC1_Init();
 855              		.loc 1 120 0
 856 001e FFF7FEFF 		bl	MX_TIM3_Init
 857              	.LVL46:
 121:Src/main.c    ****   MX_ADC2_Init();
 858              		.loc 1 121 0
 859 0022 FFF7FEFF 		bl	MX_ADC1_Init
 860              	.LVL47:
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 861              		.loc 1 122 0
 862 0026 FFF7FEFF 		bl	MX_ADC2_Init
 863              	.LVL48:
 124:Src/main.c    **** 	adc2Handle = &hadc2;
 864              		.loc 1 124 0
 865 002a 094A     		ldr	r2, .L56
 866 002c 094B     		ldr	r3, .L56+4
 867 002e 1A60     		str	r2, [r3]
 125:Src/main.c    **** 	can1Handle = &hcan1;
 868              		.loc 1 125 0
 869 0030 094A     		ldr	r2, .L56+8
 870 0032 0A4B     		ldr	r3, .L56+12
 871 0034 1A60     		str	r2, [r3]
 126:Src/main.c    **** 	can2Handle = &hcan2;
 872              		.loc 1 126 0
 873 0036 0A4A     		ldr	r2, .L56+16
 874 0038 0A4B     		ldr	r3, .L56+20
 875 003a 1A60     		str	r2, [r3]
 127:Src/main.c    **** 	tim3Handle = &htim3;
 876              		.loc 1 127 0
 877 003c 0A4A     		ldr	r2, .L56+24
 878 003e 0B4B     		ldr	r3, .L56+28
 879 0040 1A60     		str	r2, [r3]
 128:Src/main.c    **** 	usrMain();
 880              		.loc 1 128 0
 881 0042 0B4A     		ldr	r2, .L56+32
 882 0044 0B4B     		ldr	r3, .L56+36
 883 0046 1A60     		str	r2, [r3]
 129:Src/main.c    ****   /* USER CODE END 2 */
 884              		.loc 1 129 0
 885 0048 FFF7FEFF 		bl	usrMain
 886              	.LVL49:
 887              	.L54:
 140:Src/main.c    ****   /* USER CODE END 3 */
 888              		.loc 1 140 0 discriminator 1
 889 004c FEE7     		b	.L54
 890              	.L57:
 891 004e 00BF     		.align	2
 892              	.L56:
 893 0050 00000000 		.word	hadc1
 894 0054 00000000 		.word	adc1Handle
 895 0058 00000000 		.word	hadc2
 896 005c 00000000 		.word	adc2Handle
 897 0060 00000000 		.word	hcan1
ARM GAS  /tmp/ccjEuVCe.s 			page 27


 898 0064 00000000 		.word	can1Handle
 899 0068 00000000 		.word	hcan2
 900 006c 00000000 		.word	can2Handle
 901 0070 00000000 		.word	htim3
 902 0074 00000000 		.word	tim3Handle
 903              		.cfi_endproc
 904              	.LFE63:
 906              		.comm	huart1,64,4
 907              		.comm	huart4,64,4
 908              		.comm	htim3,64,4
 909              		.comm	hcan2,68,4
 910              		.comm	hcan1,68,4
 911              		.comm	hadc2,48,4
 912              		.comm	hadc1,48,4
 913              		.section	.rodata.str1.4,"aMS",%progbits,1
 914              		.align	2
 915              	.LC0:
 916 0000 5372632F 		.ascii	"Src/main.c\000"
 916      6D61696E 
 916      2E6300
 917              		.text
 918              	.Letext0:
 919              		.file 2 "../../shared/firmware/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f105xc.h"
 920              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 921              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 922              		.file 5 "../../shared/firmware/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 923              		.file 6 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 924              		.file 7 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 925              		.file 8 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 926              		.file 9 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 927              		.file 10 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 928              		.file 11 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 929              		.file 12 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 930              		.file 13 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 931              		.file 14 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 932              		.file 15 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 933              		.file 16 "../../shared/firmware/Drivers/CMSIS/Include/core_cm3.h"
 934              		.file 17 "Inc/handles.h"
 935              		.file 18 "../../shared/firmware/Inc/globals.h"
 936              		.file 19 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 937              		.file 20 "../../shared/firmware/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 938              		.file 21 "Inc/usrMain.h"
ARM GAS  /tmp/ccjEuVCe.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccjEuVCe.s:19     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccjEuVCe.s:143    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccjEuVCe.s:150    .text._Error_Handler:0000000000000000 $t
     /tmp/ccjEuVCe.s:155    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccjEuVCe.s:171    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:175    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccjEuVCe.s:230    .text.MX_CAN1_Init:000000000000003c $d
                            *COM*:0000000000000044 hcan1
     /tmp/ccjEuVCe.s:237    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:241    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccjEuVCe.s:296    .text.MX_CAN2_Init:000000000000003c $d
                            *COM*:0000000000000044 hcan2
     /tmp/ccjEuVCe.s:303    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:307    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccjEuVCe.s:353    .text.MX_USART1_UART_Init:0000000000000030 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccjEuVCe.s:360    .text.MX_UART4_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:364    .text.MX_UART4_Init:0000000000000000 MX_UART4_Init
     /tmp/ccjEuVCe.s:410    .text.MX_UART4_Init:0000000000000030 $d
                            *COM*:0000000000000040 huart4
     /tmp/ccjEuVCe.s:417    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:421    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccjEuVCe.s:512    .text.MX_TIM3_Init:0000000000000070 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccjEuVCe.s:519    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:523    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccjEuVCe.s:595    .text.MX_ADC1_Init:0000000000000050 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccjEuVCe.s:602    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccjEuVCe.s:606    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccjEuVCe.s:678    .text.MX_ADC2_Init:0000000000000054 $d
                            *COM*:0000000000000030 hadc2
     /tmp/ccjEuVCe.s:685    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccjEuVCe.s:690    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccjEuVCe.s:810    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccjEuVCe.s:817    .text.main:0000000000000000 $t
     /tmp/ccjEuVCe.s:822    .text.main:0000000000000000 main
     /tmp/ccjEuVCe.s:893    .text.main:0000000000000050 $d
     /tmp/ccjEuVCe.s:914    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_CAN_Init
HAL_UART_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccjEuVCe.s 			page 29


HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
usrMain
adc1Handle
adc2Handle
can1Handle
can2Handle
tim3Handle
